
ECU_gateWay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080020f8  080020f8  000030f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002374  08002374  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002374  08002374  00003374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800237c  0800237c  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800237c  0800237c  0000337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002380  08002380  00003380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002384  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004060  2**0
                  CONTENTS
 10 .bss          00000468  20000060  20000060  00004060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  00004060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003880  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f79  00000000  00000000  00007910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003a8  00000000  00000000  00008890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000029f  00000000  00000000  00008c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200c4  00000000  00000000  00008ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005781  00000000  00000000  00028f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c08a4  00000000  00000000  0002e71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eefc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001124  00000000  00000000  000ef004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000f0128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080020e0 	.word	0x080020e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080020e0 	.word	0x080020e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <CAN_Receive>:
 * @brief  Receive CAN frame from buffer
 * @param  frame: Pointer to frame structure
 * @retval true if frame received, false if buffer empty
 */
bool CAN_Receive(CanFrame_t* frame)
{
 8000280:	b4b0      	push	{r4, r5, r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    if (frame == NULL || rx_count == 0) return false;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d004      	beq.n	8000298 <CAN_Receive+0x18>
 800028e:	4b1b      	ldr	r3, [pc, #108]	@ (80002fc <CAN_Receive+0x7c>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b29b      	uxth	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d101      	bne.n	800029c <CAN_Receive+0x1c>
 8000298:	2300      	movs	r3, #0
 800029a:	e02a      	b.n	80002f2 <CAN_Receive+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800029c:	b672      	cpsid	i
}
 800029e:	bf00      	nop
    
    /* Disable interrupts for atomic operation */
    __disable_irq();
    
    /* Copy frame from buffer */
    *frame = rx_buffer[rx_tail];
 80002a0:	4b17      	ldr	r3, [pc, #92]	@ (8000300 <CAN_Receive+0x80>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	4619      	mov	r1, r3
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	4a16      	ldr	r2, [pc, #88]	@ (8000304 <CAN_Receive+0x84>)
 80002ac:	460b      	mov	r3, r1
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	440b      	add	r3, r1
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	4413      	add	r3, r2
 80002b6:	4604      	mov	r4, r0
 80002b8:	461d      	mov	r5, r3
 80002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002be:	682b      	ldr	r3, [r5, #0]
 80002c0:	6023      	str	r3, [r4, #0]
    rx_tail = (rx_tail + 1) % CAN_RX_BUFFER_SIZE;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <CAN_Receive+0x80>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	3301      	adds	r3, #1
 80002ca:	425a      	negs	r2, r3
 80002cc:	f003 030f 	and.w	r3, r3, #15
 80002d0:	f002 020f 	and.w	r2, r2, #15
 80002d4:	bf58      	it	pl
 80002d6:	4253      	negpl	r3, r2
 80002d8:	b29a      	uxth	r2, r3
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <CAN_Receive+0x80>)
 80002dc:	801a      	strh	r2, [r3, #0]
    rx_count--;
 80002de:	4b07      	ldr	r3, [pc, #28]	@ (80002fc <CAN_Receive+0x7c>)
 80002e0:	881b      	ldrh	r3, [r3, #0]
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	3b01      	subs	r3, #1
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	4b04      	ldr	r3, [pc, #16]	@ (80002fc <CAN_Receive+0x7c>)
 80002ea:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80002ec:	b662      	cpsie	i
}
 80002ee:	bf00      	nop
    
    __enable_irq();
    
    return true;
 80002f0:	2301      	movs	r3, #1
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bcb0      	pop	{r4, r5, r7}
 80002fa:	4770      	bx	lr
 80002fc:	200001c0 	.word	0x200001c0
 8000300:	200001be 	.word	0x200001be
 8000304:	2000007c 	.word	0x2000007c

08000308 <CAN_GetLastError>:
/**
 * @brief  Get last CAN error
 * @retval Last error code
 */
CanError_t CAN_GetLastError(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    return last_error;
 800030c:	4b03      	ldr	r3, [pc, #12]	@ (800031c <CAN_GetLastError+0x14>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	b2db      	uxtb	r3, r3
}
 8000312:	4618      	mov	r0, r3
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	200001c2 	.word	0x200001c2

08000320 <CAN_ClearError>:

/**
 * @brief  Clear CAN error flags
 */
void CAN_ClearError(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    last_error = CAN_ERROR_NONE;
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <CAN_ClearError+0x1c>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
    CAN1->ESR = 0; /* Clear error flags */
 800032a:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <CAN_ClearError+0x20>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	200001c2 	.word	0x200001c2
 8000340:	40006400 	.word	0x40006400

08000344 <CAN_IRQHandler>:

/**
 * @brief  CAN interrupt handler
 */
void CAN_IRQHandler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
    /* FIFO 0 message pending */
    if (CAN1->RF0R & CAN_RF0R_FMP0) {
 800034a:	4b66      	ldr	r3, [pc, #408]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	f003 0303 	and.w	r3, r3, #3
 8000352:	2b00      	cmp	r3, #0
 8000354:	f000 808a 	beq.w	800046c <CAN_IRQHandler+0x128>
        /* Check for buffer overflow */
        if (rx_count >= CAN_RX_BUFFER_SIZE) {
 8000358:	4b63      	ldr	r3, [pc, #396]	@ (80004e8 <CAN_IRQHandler+0x1a4>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29b      	uxth	r3, r3
 800035e:	2b0f      	cmp	r3, #15
 8000360:	d909      	bls.n	8000376 <CAN_IRQHandler+0x32>
            last_error = CAN_ERROR_OVERRUN;
 8000362:	4b62      	ldr	r3, [pc, #392]	@ (80004ec <CAN_IRQHandler+0x1a8>)
 8000364:	2204      	movs	r2, #4
 8000366:	701a      	strb	r2, [r3, #0]
            /* Release FIFO message */
            CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000368:	4b5e      	ldr	r3, [pc, #376]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a5d      	ldr	r2, [pc, #372]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	60d3      	str	r3, [r2, #12]
            return;
 8000374:	e0b2      	b.n	80004dc <CAN_IRQHandler+0x198>
        }
        
        /* Read message from FIFO */
        CanFrame_t* frame = &rx_buffer[rx_head];
 8000376:	4b5e      	ldr	r3, [pc, #376]	@ (80004f0 <CAN_IRQHandler+0x1ac>)
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	b29b      	uxth	r3, r3
 800037c:	461a      	mov	r2, r3
 800037e:	4613      	mov	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4413      	add	r3, r2
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	4a5b      	ldr	r2, [pc, #364]	@ (80004f4 <CAN_IRQHandler+0x1b0>)
 8000388:	4413      	add	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]
        
        /* Extract identifier and DLC */
        frame->id = (CAN1->sFIFOMailBox[0].RIR >> CAN_RI0R_STID_Pos) & 0x7FF;
 800038c:	4b55      	ldr	r3, [pc, #340]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 800038e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000392:	0d5b      	lsrs	r3, r3, #21
 8000394:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	601a      	str	r2, [r3, #0]
        frame->dlc = CAN1->sFIFOMailBox[0].RDTR & CAN_RDT0R_DLC;
 800039c:	4b51      	ldr	r3, [pc, #324]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 800039e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	711a      	strb	r2, [r3, #4]
        
        /* Extract data */
        uint32_t data_low = CAN1->sFIFOMailBox[0].RDLR;
 80003ae:	4b4d      	ldr	r3, [pc, #308]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 80003b0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 80003b4:	60bb      	str	r3, [r7, #8]
        uint32_t data_high = CAN1->sFIFOMailBox[0].RDHR;
 80003b6:	4b4b      	ldr	r3, [pc, #300]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 80003b8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 80003bc:	607b      	str	r3, [r7, #4]
        
        for (int i = 0; i < 4 && i < frame->dlc; i++) {
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	e00e      	b.n	80003e2 <CAN_IRQHandler+0x9e>
            frame->data[i] = (data_low >> (i * 8)) & 0xFF;
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	00db      	lsls	r3, r3, #3
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	fa22 f303 	lsr.w	r3, r2, r3
 80003ce:	b2d9      	uxtb	r1, r3
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	4413      	add	r3, r2
 80003d6:	3305      	adds	r3, #5
 80003d8:	460a      	mov	r2, r1
 80003da:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 4 && i < frame->dlc; i++) {
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	3301      	adds	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	dc05      	bgt.n	80003f4 <CAN_IRQHandler+0xb0>
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	461a      	mov	r2, r3
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	4293      	cmp	r3, r2
 80003f2:	dbe7      	blt.n	80003c4 <CAN_IRQHandler+0x80>
        }
        for (int i = 4; i < 8 && i < frame->dlc; i++) {
 80003f4:	2304      	movs	r3, #4
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	e00f      	b.n	800041a <CAN_IRQHandler+0xd6>
            frame->data[i] = (data_high >> ((i - 4) * 8)) & 0xFF;
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	3b04      	subs	r3, #4
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	fa22 f303 	lsr.w	r3, r2, r3
 8000406:	b2d9      	uxtb	r1, r3
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	4413      	add	r3, r2
 800040e:	3305      	adds	r3, #5
 8000410:	460a      	mov	r2, r1
 8000412:	701a      	strb	r2, [r3, #0]
        for (int i = 4; i < 8 && i < frame->dlc; i++) {
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	3301      	adds	r3, #1
 8000418:	613b      	str	r3, [r7, #16]
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	2b07      	cmp	r3, #7
 800041e:	dc05      	bgt.n	800042c <CAN_IRQHandler+0xe8>
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	461a      	mov	r2, r3
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	4293      	cmp	r3, r2
 800042a:	dbe6      	blt.n	80003fa <CAN_IRQHandler+0xb6>
        }
        
        frame->timestamp = HAL_GetTick();
 800042c:	f001 f9ac 	bl	8001788 <HAL_GetTick>
 8000430:	4602      	mov	r2, r0
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	611a      	str	r2, [r3, #16]
        
        /* Update buffer pointers */
        rx_head = (rx_head + 1) % CAN_RX_BUFFER_SIZE;
 8000436:	4b2e      	ldr	r3, [pc, #184]	@ (80004f0 <CAN_IRQHandler+0x1ac>)
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	b29b      	uxth	r3, r3
 800043c:	3301      	adds	r3, #1
 800043e:	425a      	negs	r2, r3
 8000440:	f003 030f 	and.w	r3, r3, #15
 8000444:	f002 020f 	and.w	r2, r2, #15
 8000448:	bf58      	it	pl
 800044a:	4253      	negpl	r3, r2
 800044c:	b29a      	uxth	r2, r3
 800044e:	4b28      	ldr	r3, [pc, #160]	@ (80004f0 <CAN_IRQHandler+0x1ac>)
 8000450:	801a      	strh	r2, [r3, #0]
        rx_count++;
 8000452:	4b25      	ldr	r3, [pc, #148]	@ (80004e8 <CAN_IRQHandler+0x1a4>)
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	b29b      	uxth	r3, r3
 8000458:	3301      	adds	r3, #1
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b22      	ldr	r3, [pc, #136]	@ (80004e8 <CAN_IRQHandler+0x1a4>)
 800045e:	801a      	strh	r2, [r3, #0]
        
        /* Release FIFO message */
        CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000460:	4b20      	ldr	r3, [pc, #128]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	4a1f      	ldr	r2, [pc, #124]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 8000466:	f043 0320 	orr.w	r3, r3, #32
 800046a:	60d3      	str	r3, [r2, #12]
    }
    
    /* FIFO 0 overrun */
    if (CAN1->RF0R & CAN_RF0R_FOVR0) {
 800046c:	4b1d      	ldr	r3, [pc, #116]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	f003 0310 	and.w	r3, r3, #16
 8000474:	2b00      	cmp	r3, #0
 8000476:	d008      	beq.n	800048a <CAN_IRQHandler+0x146>
        last_error = CAN_ERROR_OVERRUN;
 8000478:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <CAN_IRQHandler+0x1a8>)
 800047a:	2204      	movs	r2, #4
 800047c:	701a      	strb	r2, [r3, #0]
        CAN1->RF0R |= CAN_RF0R_FOVR0; /* Clear flag */
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	4a18      	ldr	r2, [pc, #96]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 8000484:	f043 0310 	orr.w	r3, r3, #16
 8000488:	60d3      	str	r3, [r2, #12]
    }
    
    /* Bus-off error */
    if (CAN1->MSR & CAN_MSR_ERRI) {
 800048a:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	f003 0304 	and.w	r3, r3, #4
 8000492:	2b00      	cmp	r3, #0
 8000494:	d022      	beq.n	80004dc <CAN_IRQHandler+0x198>
        if (CAN1->ESR & CAN_ESR_BOFF) {
 8000496:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d003      	beq.n	80004aa <CAN_IRQHandler+0x166>
            last_error = CAN_ERROR_BUS_OFF;
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <CAN_IRQHandler+0x1a8>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	e012      	b.n	80004d0 <CAN_IRQHandler+0x18c>
        } else if (CAN1->ESR & CAN_ESR_EPVF) {
 80004aa:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0302 	and.w	r3, r3, #2
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d003      	beq.n	80004be <CAN_IRQHandler+0x17a>
            last_error = CAN_ERROR_ERROR_PASSIVE;
 80004b6:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <CAN_IRQHandler+0x1a8>)
 80004b8:	2202      	movs	r2, #2
 80004ba:	701a      	strb	r2, [r3, #0]
 80004bc:	e008      	b.n	80004d0 <CAN_IRQHandler+0x18c>
        } else if (CAN1->ESR & CAN_ESR_EWGF) {
 80004be:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d002      	beq.n	80004d0 <CAN_IRQHandler+0x18c>
            last_error = CAN_ERROR_WARNING;
 80004ca:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <CAN_IRQHandler+0x1a8>)
 80004cc:	2203      	movs	r2, #3
 80004ce:	701a      	strb	r2, [r3, #0]
        }
        CAN1->MSR |= CAN_MSR_ERRI; /* Clear error interrupt flag */
 80004d0:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	4a03      	ldr	r2, [pc, #12]	@ (80004e4 <CAN_IRQHandler+0x1a0>)
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6053      	str	r3, [r2, #4]
    }
}
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40006400 	.word	0x40006400
 80004e8:	200001c0 	.word	0x200001c0
 80004ec:	200001c2 	.word	0x200001c2
 80004f0:	200001bc 	.word	0x200001bc
 80004f4:	2000007c 	.word	0x2000007c

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  // HAL_Init();  // Removed - using MCAL

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 fdf9 	bl	80010f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f851 	bl	80005a8 <MX_GPIO_Init>
  
  /* Initialize Gateway ECU components */
  Gateway_Init();
 8000506:	f000 f857 	bl	80005b8 <Gateway_Init>
  
  /* Send simple test pattern first to verify UART */
  UART_Write("A\r\n");
 800050a:	4820      	ldr	r0, [pc, #128]	@ (800058c <main+0x94>)
 800050c:	f000 ff7e 	bl	800140c <UART_Write>
  for(volatile int i = 0; i < 1000000; i++);  /* Simple delay */
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e002      	b.n	800051c <main+0x24>
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	3301      	adds	r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a1c      	ldr	r2, [pc, #112]	@ (8000590 <main+0x98>)
 8000520:	4293      	cmp	r3, r2
 8000522:	ddf8      	ble.n	8000516 <main+0x1e>
  UART_Write("TEST\r\n");
 8000524:	481b      	ldr	r0, [pc, #108]	@ (8000594 <main+0x9c>)
 8000526:	f000 ff71 	bl	800140c <UART_Write>
  for(volatile int i = 0; i < 1000000; i++);  /* Simple delay */
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	e002      	b.n	8000536 <main+0x3e>
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	3301      	adds	r3, #1
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a15      	ldr	r2, [pc, #84]	@ (8000590 <main+0x98>)
 800053a:	4293      	cmp	r3, r2
 800053c:	ddf8      	ble.n	8000530 <main+0x38>
  UART_Write("12345\r\n");
 800053e:	4816      	ldr	r0, [pc, #88]	@ (8000598 <main+0xa0>)
 8000540:	f000 ff64 	bl	800140c <UART_Write>
  for(volatile int i = 0; i < 1000000; i++);  /* Simple delay */
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	e002      	b.n	8000550 <main+0x58>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3301      	adds	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a0f      	ldr	r2, [pc, #60]	@ (8000590 <main+0x98>)
 8000554:	4293      	cmp	r3, r2
 8000556:	ddf8      	ble.n	800054a <main+0x52>
  
  /* Send startup message for loopback mode */
  UART_Write("Gateway ECU Started - LOOPBACK MODE\r\n");
 8000558:	4810      	ldr	r0, [pc, #64]	@ (800059c <main+0xa4>)
 800055a:	f000 ff57 	bl	800140c <UART_Write>
  UART_Write("Generating test CAN frames internally\r\n");
 800055e:	4810      	ldr	r0, [pc, #64]	@ (80005a0 <main+0xa8>)
 8000560:	f000 ff54 	bl	800140c <UART_Write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Generate test CAN frames (loopback mode) */
    Gateway_SendTestFrames();
 8000564:	f000 f8d4 	bl	8000710 <Gateway_SendTestFrames>
    
    /* Process CAN messages */
    Gateway_ProcessCanMessages();
 8000568:	f000 fa74 	bl	8000a54 <Gateway_ProcessCanMessages>
    
    /* Router polling for error handling */
    Router_Poll();
 800056c:	f000 fb24 	bl	8000bb8 <Router_Poll>
    
    /* Print statistics periodically */
    Gateway_PrintStatistics();
 8000570:	f000 fa84 	bl	8000a7c <Gateway_PrintStatistics>
    
    /* Small delay to prevent excessive CPU usage */
    /* Simple delay loop */
    for(volatile int i = 0; i < 168000; i++);  /* ~1ms delay at 168MHz */
 8000574:	2300      	movs	r3, #0
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	e002      	b.n	8000580 <main+0x88>
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <main+0xac>)
 8000584:	4293      	cmp	r3, r2
 8000586:	ddf8      	ble.n	800057a <main+0x82>
    Gateway_SendTestFrames();
 8000588:	e7ec      	b.n	8000564 <main+0x6c>
 800058a:	bf00      	nop
 800058c:	080020f8 	.word	0x080020f8
 8000590:	000f423f 	.word	0x000f423f
 8000594:	080020fc 	.word	0x080020fc
 8000598:	08002104 	.word	0x08002104
 800059c:	0800210c 	.word	0x0800210c
 80005a0:	08002134 	.word	0x08002134
 80005a4:	0002903f 	.word	0x0002903f

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* GPIO initialization is handled by our MCAL system_config module */
  /* This function is kept for HAL compatibility but functionality moved to GPIO_Config() */

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <Gateway_Init>:
 * @brief  Initialize Gateway ECU components (LOOPBACK MODE)
 * @param  None
 * @retval None
 */
static void Gateway_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* Initialize system configuration (clocks, GPIO, NVIC) */
  SystemConfig_Init();
 80005be:	f000 fd8e 	bl	80010de <SystemConfig_Init>
  
  /* Enable CAN1 clock for loopback configuration */
  RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 80005c2:	4b4c      	ldr	r3, [pc, #304]	@ (80006f4 <Gateway_Init+0x13c>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c6:	4a4b      	ldr	r2, [pc, #300]	@ (80006f4 <Gateway_Init+0x13c>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005cc:	6413      	str	r3, [r2, #64]	@ 0x40
  
  /* Configure CAN1 in loopback mode */
  /* Request initialization mode */
  CAN1->MCR |= CAN_MCR_INRQ;
 80005ce:	4b4a      	ldr	r3, [pc, #296]	@ (80006f8 <Gateway_Init+0x140>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a49      	ldr	r2, [pc, #292]	@ (80006f8 <Gateway_Init+0x140>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6013      	str	r3, [r2, #0]
  
  /* Wait for initialization mode acknowledgment */
  uint32_t timeout = SystemCoreClock / 1000; /* 1 ms timeout */
 80005da:	4b48      	ldr	r3, [pc, #288]	@ (80006fc <Gateway_Init+0x144>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a48      	ldr	r2, [pc, #288]	@ (8000700 <Gateway_Init+0x148>)
 80005e0:	fba2 2303 	umull	r2, r3, r2, r3
 80005e4:	099b      	lsrs	r3, r3, #6
 80005e6:	607b      	str	r3, [r7, #4]
  while (!(CAN1->MSR & CAN_MSR_INAK) && timeout--);
 80005e8:	bf00      	nop
 80005ea:	4b43      	ldr	r3, [pc, #268]	@ (80006f8 <Gateway_Init+0x140>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d104      	bne.n	8000600 <Gateway_Init+0x48>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	1e5a      	subs	r2, r3, #1
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f4      	bne.n	80005ea <Gateway_Init+0x32>
  
  /* Configure CAN options with loopback mode enabled */
  CAN1->MCR = CAN_MCR_INRQ |         /* Initialization request */
 8000600:	4b3d      	ldr	r3, [pc, #244]	@ (80006f8 <Gateway_Init+0x140>)
 8000602:	2271      	movs	r2, #113	@ 0x71
 8000604:	601a      	str	r2, [r3, #0]
              CAN_MCR_AWUM |          /* Automatic wake-up mode */
              CAN_MCR_ABOM;           /* Automatic bus-off management */
  
  /* Configure bit timing for 500 kbit/s */
  /* Prescaler = 6 (5+1), BS1 = 13 tq (12+1), BS2 = 2 tq (1+1), SJW = 1 tq (0+1) */
  CAN1->BTR = (0 << CAN_BTR_SJW_Pos) |     /* SJW = 1 tq */
 8000606:	4b3c      	ldr	r3, [pc, #240]	@ (80006f8 <Gateway_Init+0x140>)
 8000608:	4a3e      	ldr	r2, [pc, #248]	@ (8000704 <Gateway_Init+0x14c>)
 800060a:	61da      	str	r2, [r3, #28]
              (5) |                         /* Prescaler = 6 */
              CAN_BTR_LBKM;                 /* LOOPBACK MODE ENABLED */
  
  /* Configure receive filters */
  /* Enter filter initialization mode */
  CAN1->FMR |= CAN_FMR_FINIT;
 800060c:	4b3a      	ldr	r3, [pc, #232]	@ (80006f8 <Gateway_Init+0x140>)
 800060e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000612:	4a39      	ldr	r2, [pc, #228]	@ (80006f8 <Gateway_Init+0x140>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  
  /* Configure filter 0 for all test IDs (0x100, 0x101, 0x102) */
  CAN1->FM1R &= ~CAN_FM1R_FBM0;      /* Identifier mask mode */
 800061c:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <Gateway_Init+0x140>)
 800061e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000622:	4a35      	ldr	r2, [pc, #212]	@ (80006f8 <Gateway_Init+0x140>)
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  CAN1->FS1R |= CAN_FS1R_FSC0;       /* 32-bit scale */
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <Gateway_Init+0x140>)
 800062e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000632:	4a31      	ldr	r2, [pc, #196]	@ (80006f8 <Gateway_Init+0x140>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
  CAN1->FFA1R &= ~CAN_FFA1R_FFA0;    /* FIFO 0 assignment */
 800063c:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <Gateway_Init+0x140>)
 800063e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000642:	4a2d      	ldr	r2, [pc, #180]	@ (80006f8 <Gateway_Init+0x140>)
 8000644:	f023 0301 	bic.w	r3, r3, #1
 8000648:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
  
  /* Set filter to accept IDs 0x100-0x107 */
  CAN1->sFilterRegister[0].FR1 = (0x100 << 21);
 800064c:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <Gateway_Init+0x140>)
 800064e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000652:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
  CAN1->sFilterRegister[0].FR2 = (0x7F8 << 21); /* Mask for 0x100-0x107 */
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <Gateway_Init+0x140>)
 8000658:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800065c:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
  
  /* Activate filter 0 */
  CAN1->FA1R |= CAN_FA1R_FACT0;
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <Gateway_Init+0x140>)
 8000662:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000666:	4a24      	ldr	r2, [pc, #144]	@ (80006f8 <Gateway_Init+0x140>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
  
  /* Leave filter initialization mode */
  CAN1->FMR &= ~CAN_FMR_FINIT;
 8000670:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <Gateway_Init+0x140>)
 8000672:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000676:	4a20      	ldr	r2, [pc, #128]	@ (80006f8 <Gateway_Init+0x140>)
 8000678:	f023 0301 	bic.w	r3, r3, #1
 800067c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  
  /* Enable FIFO 0 message pending interrupt */
  CAN1->IER = CAN_IER_FMPIE0 |        /* FIFO 0 message pending */
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <Gateway_Init+0x140>)
 8000682:	f240 720a 	movw	r2, #1802	@ 0x70a
 8000686:	615a      	str	r2, [r3, #20]
              CAN_IER_BOFIE |         /* Bus-off */
              CAN_IER_EPVIE |         /* Error passive */
              CAN_IER_EWGIE;          /* Error warning */
  
  /* Leave initialization mode */
  CAN1->MCR &= ~CAN_MCR_INRQ;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <Gateway_Init+0x140>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1a      	ldr	r2, [pc, #104]	@ (80006f8 <Gateway_Init+0x140>)
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
  
  /* Wait for normal mode */
  timeout = SystemCoreClock / 1000;
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <Gateway_Init+0x144>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	@ (8000700 <Gateway_Init+0x148>)
 800069a:	fba2 2303 	umull	r2, r3, r2, r3
 800069e:	099b      	lsrs	r3, r3, #6
 80006a0:	607b      	str	r3, [r7, #4]
  while ((CAN1->MSR & CAN_MSR_INAK) && timeout--);
 80006a2:	bf00      	nop
 80006a4:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <Gateway_Init+0x140>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d004      	beq.n	80006ba <Gateway_Init+0x102>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	1e5a      	subs	r2, r3, #1
 80006b4:	607a      	str	r2, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f4      	bne.n	80006a4 <Gateway_Init+0xec>
  
  /* Initialize UART driver */
  if (!UART_Init(UART_BAUDRATE)) {
 80006ba:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80006be:	f000 fe37 	bl	8001330 <UART_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f083 0301 	eor.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <Gateway_Init+0x11a>
    Error_Handler();
 80006ce:	f000 fa0b 	bl	8000ae8 <Error_Handler>
  }
  
  /* Initialize PDU Router */
  Router_Init();
 80006d2:	f000 fa0f 	bl	8000af4 <Router_Init>
  
  /* Record initialization time */
  last_stats_time = HAL_GetTick();
 80006d6:	f001 f857 	bl	8001788 <HAL_GetTick>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <Gateway_Init+0x150>)
 80006de:	6013      	str	r3, [r2, #0]
  last_test_frame_time = HAL_GetTick();
 80006e0:	f001 f852 	bl	8001788 <HAL_GetTick>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a09      	ldr	r2, [pc, #36]	@ (800070c <Gateway_Init+0x154>)
 80006e8:	6013      	str	r3, [r2, #0]
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40006400 	.word	0x40006400
 80006fc:	20000008 	.word	0x20000008
 8000700:	10624dd3 	.word	0x10624dd3
 8000704:	401c0005 	.word	0x401c0005
 8000708:	200001c4 	.word	0x200001c4
 800070c:	200001c8 	.word	0x200001c8

08000710 <Gateway_SendTestFrames>:
 * @brief  Send test CAN frames in loopback mode
 * @param  None
 * @retval None
 */
static void Gateway_SendTestFrames(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
  static uint32_t frame_counter = 0;
  
  /* Send test frames every 1000 main loop iterations (~1 second at 1ms loop) */
  frame_counter++;
 8000716:	4b88      	ldr	r3, [pc, #544]	@ (8000938 <Gateway_SendTestFrames+0x228>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a86      	ldr	r2, [pc, #536]	@ (8000938 <Gateway_SendTestFrames+0x228>)
 800071e:	6013      	str	r3, [r2, #0]
  if (frame_counter >= TEST_FRAME_INTERVAL_MS) {
 8000720:	4b85      	ldr	r3, [pc, #532]	@ (8000938 <Gateway_SendTestFrames+0x228>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000728:	f0c0 8185 	bcc.w	8000a36 <Gateway_SendTestFrames+0x326>
    frame_counter = 0;  /* Reset counter */
 800072c:	4b82      	ldr	r3, [pc, #520]	@ (8000938 <Gateway_SendTestFrames+0x228>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
    
    /* Debug message */
    UART_Write("Sending CAN test frame\r\n");
 8000732:	4882      	ldr	r0, [pc, #520]	@ (800093c <Gateway_SendTestFrames+0x22c>)
 8000734:	f000 fe6a 	bl	800140c <UART_Write>
    
    /* Wait for available transmit mailbox */
    uint32_t timeout = 1000;
 8000738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073c:	617b      	str	r3, [r7, #20]
    while (!(CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_TME1 | CAN_TSR_TME2)) && timeout--);
 800073e:	bf00      	nop
 8000740:	4b7f      	ldr	r3, [pc, #508]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f003 53e0 	and.w	r3, r3, #469762048	@ 0x1c000000
 8000748:	2b00      	cmp	r3, #0
 800074a:	d104      	bne.n	8000756 <Gateway_SendTestFrames+0x46>
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	617a      	str	r2, [r7, #20]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f4      	bne.n	8000740 <Gateway_SendTestFrames+0x30>
    
    if (timeout > 0) {
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	2b00      	cmp	r3, #0
 800075a:	f000 813f 	beq.w	80009dc <Gateway_SendTestFrames+0x2cc>
      uint8_t mailbox = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	74fb      	strb	r3, [r7, #19]
      if (CAN1->TSR & CAN_TSR_TME0) mailbox = 0;
 8000762:	4b77      	ldr	r3, [pc, #476]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d002      	beq.n	8000774 <Gateway_SendTestFrames+0x64>
 800076e:	2300      	movs	r3, #0
 8000770:	74fb      	strb	r3, [r7, #19]
 8000772:	e010      	b.n	8000796 <Gateway_SendTestFrames+0x86>
      else if (CAN1->TSR & CAN_TSR_TME1) mailbox = 1;
 8000774:	4b72      	ldr	r3, [pc, #456]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <Gateway_SendTestFrames+0x76>
 8000780:	2301      	movs	r3, #1
 8000782:	74fb      	strb	r3, [r7, #19]
 8000784:	e007      	b.n	8000796 <Gateway_SendTestFrames+0x86>
      else if (CAN1->TSR & CAN_TSR_TME2) mailbox = 2;
 8000786:	4b6e      	ldr	r3, [pc, #440]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <Gateway_SendTestFrames+0x86>
 8000792:	2302      	movs	r3, #2
 8000794:	74fb      	strb	r3, [r7, #19]
      
      /* Send Engine RPM frame (ID 0x100) */
      uint16_t rpm_raw = test_rpm * 4;
 8000796:	4b6b      	ldr	r3, [pc, #428]	@ (8000944 <Gateway_SendTestFrames+0x234>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	823b      	strh	r3, [r7, #16]
      CAN1->sTxMailBox[mailbox].TIR = (0x100 << CAN_TI0R_STID_Pos);
 800079e:	4a68      	ldr	r2, [pc, #416]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80007a0:	7cfb      	ldrb	r3, [r7, #19]
 80007a2:	3318      	adds	r3, #24
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	4413      	add	r3, r2
 80007a8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80007ac:	601a      	str	r2, [r3, #0]
      CAN1->sTxMailBox[mailbox].TDTR = 8; /* DLC = 8 */
 80007ae:	4a64      	ldr	r2, [pc, #400]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80007b0:	7cfb      	ldrb	r3, [r7, #19]
 80007b2:	3318      	adds	r3, #24
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	4413      	add	r3, r2
 80007b8:	3304      	adds	r3, #4
 80007ba:	2208      	movs	r2, #8
 80007bc:	601a      	str	r2, [r3, #0]
      CAN1->sTxMailBox[mailbox].TDLR = (rpm_raw & 0xFF) | ((rpm_raw >> 8) << 8);
 80007be:	8a3b      	ldrh	r3, [r7, #16]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	8a3b      	ldrh	r3, [r7, #16]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	ea42 0103 	orr.w	r1, r2, r3
 80007ce:	4a5c      	ldr	r2, [pc, #368]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80007d0:	7cfb      	ldrb	r3, [r7, #19]
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	4413      	add	r3, r2
 80007d6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80007da:	6019      	str	r1, [r3, #0]
      CAN1->sTxMailBox[mailbox].TDHR = 0;
 80007dc:	4a58      	ldr	r2, [pc, #352]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	4413      	add	r3, r2
 80007e4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
      CAN1->sTxMailBox[mailbox].TIR |= CAN_TI0R_TXRQ;
 80007ec:	4a54      	ldr	r2, [pc, #336]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80007ee:	7cfb      	ldrb	r3, [r7, #19]
 80007f0:	3318      	adds	r3, #24
 80007f2:	011b      	lsls	r3, r3, #4
 80007f4:	4413      	add	r3, r2
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4951      	ldr	r1, [pc, #324]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80007fa:	7cfb      	ldrb	r3, [r7, #19]
 80007fc:	f042 0201 	orr.w	r2, r2, #1
 8000800:	3318      	adds	r3, #24
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	440b      	add	r3, r1
 8000806:	601a      	str	r2, [r3, #0]
      
      /* Small delay between frames */
      for(volatile int i = 0; i < 1680000; i++);  /* ~10ms delay */
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	e002      	b.n	8000814 <Gateway_SendTestFrames+0x104>
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	3301      	adds	r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4a4c      	ldr	r2, [pc, #304]	@ (8000948 <Gateway_SendTestFrames+0x238>)
 8000818:	4293      	cmp	r3, r2
 800081a:	ddf8      	ble.n	800080e <Gateway_SendTestFrames+0xfe>
      
      /* Wait for next mailbox */
      timeout = 1000;
 800081c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000820:	617b      	str	r3, [r7, #20]
      while (!(CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_TME1 | CAN_TSR_TME2)) && timeout--);
 8000822:	bf00      	nop
 8000824:	4b46      	ldr	r3, [pc, #280]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f003 53e0 	and.w	r3, r3, #469762048	@ 0x1c000000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d104      	bne.n	800083a <Gateway_SendTestFrames+0x12a>
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	617a      	str	r2, [r7, #20]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f4      	bne.n	8000824 <Gateway_SendTestFrames+0x114>
      
      if (timeout > 0) {
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	2b00      	cmp	r3, #0
 800083e:	f000 80cd 	beq.w	80009dc <Gateway_SendTestFrames+0x2cc>
        if (CAN1->TSR & CAN_TSR_TME0) mailbox = 0;
 8000842:	4b3f      	ldr	r3, [pc, #252]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <Gateway_SendTestFrames+0x144>
 800084e:	2300      	movs	r3, #0
 8000850:	74fb      	strb	r3, [r7, #19]
 8000852:	e010      	b.n	8000876 <Gateway_SendTestFrames+0x166>
        else if (CAN1->TSR & CAN_TSR_TME1) mailbox = 1;
 8000854:	4b3a      	ldr	r3, [pc, #232]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <Gateway_SendTestFrames+0x156>
 8000860:	2301      	movs	r3, #1
 8000862:	74fb      	strb	r3, [r7, #19]
 8000864:	e007      	b.n	8000876 <Gateway_SendTestFrames+0x166>
        else if (CAN1->TSR & CAN_TSR_TME2) mailbox = 2;
 8000866:	4b36      	ldr	r3, [pc, #216]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <Gateway_SendTestFrames+0x166>
 8000872:	2302      	movs	r3, #2
 8000874:	74fb      	strb	r3, [r7, #19]
        
        /* Send Engine Temperature frame (ID 0x101) */
        uint8_t temp_raw = test_temp + 40;
 8000876:	4b35      	ldr	r3, [pc, #212]	@ (800094c <Gateway_SendTestFrames+0x23c>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3328      	adds	r3, #40	@ 0x28
 800087c:	73fb      	strb	r3, [r7, #15]
        CAN1->sTxMailBox[mailbox].TIR = (0x101 << CAN_TI0R_STID_Pos);
 800087e:	4a30      	ldr	r2, [pc, #192]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000880:	7cfb      	ldrb	r3, [r7, #19]
 8000882:	3318      	adds	r3, #24
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	4413      	add	r3, r2
 8000888:	4a31      	ldr	r2, [pc, #196]	@ (8000950 <Gateway_SendTestFrames+0x240>)
 800088a:	601a      	str	r2, [r3, #0]
        CAN1->sTxMailBox[mailbox].TDTR = 8; /* DLC = 8 */
 800088c:	4a2c      	ldr	r2, [pc, #176]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 800088e:	7cfb      	ldrb	r3, [r7, #19]
 8000890:	3318      	adds	r3, #24
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	4413      	add	r3, r2
 8000896:	3304      	adds	r3, #4
 8000898:	2208      	movs	r2, #8
 800089a:	601a      	str	r2, [r3, #0]
        CAN1->sTxMailBox[mailbox].TDLR = temp_raw << 16; /* Byte 2 */
 800089c:	7bfa      	ldrb	r2, [r7, #15]
 800089e:	4928      	ldr	r1, [pc, #160]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80008a0:	7cfb      	ldrb	r3, [r7, #19]
 80008a2:	0412      	lsls	r2, r2, #16
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	440b      	add	r3, r1
 80008a8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80008ac:	601a      	str	r2, [r3, #0]
        CAN1->sTxMailBox[mailbox].TDHR = 0;
 80008ae:	4a24      	ldr	r2, [pc, #144]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80008b0:	7cfb      	ldrb	r3, [r7, #19]
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	4413      	add	r3, r2
 80008b6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
        CAN1->sTxMailBox[mailbox].TIR |= CAN_TI0R_TXRQ;
 80008be:	4a20      	ldr	r2, [pc, #128]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80008c0:	7cfb      	ldrb	r3, [r7, #19]
 80008c2:	3318      	adds	r3, #24
 80008c4:	011b      	lsls	r3, r3, #4
 80008c6:	4413      	add	r3, r2
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	491d      	ldr	r1, [pc, #116]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80008cc:	7cfb      	ldrb	r3, [r7, #19]
 80008ce:	f042 0201 	orr.w	r2, r2, #1
 80008d2:	3318      	adds	r3, #24
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	440b      	add	r3, r1
 80008d8:	601a      	str	r2, [r3, #0]
        
        for(volatile int i = 0; i < 1680000; i++);  /* ~10ms delay */
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	e002      	b.n	80008e6 <Gateway_SendTestFrames+0x1d6>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3301      	adds	r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a17      	ldr	r2, [pc, #92]	@ (8000948 <Gateway_SendTestFrames+0x238>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	ddf8      	ble.n	80008e0 <Gateway_SendTestFrames+0x1d0>
        
        /* Wait for next mailbox */
        timeout = 1000;
 80008ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f2:	617b      	str	r3, [r7, #20]
        while (!(CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_TME1 | CAN_TSR_TME2)) && timeout--);
 80008f4:	bf00      	nop
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f003 53e0 	and.w	r3, r3, #469762048	@ 0x1c000000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <Gateway_SendTestFrames+0x1fc>
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	1e5a      	subs	r2, r3, #1
 8000906:	617a      	str	r2, [r7, #20]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1f4      	bne.n	80008f6 <Gateway_SendTestFrames+0x1e6>
        
        if (timeout > 0) {
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d064      	beq.n	80009dc <Gateway_SendTestFrames+0x2cc>
          if (CAN1->TSR & CAN_TSR_TME0) mailbox = 0;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d002      	beq.n	8000924 <Gateway_SendTestFrames+0x214>
 800091e:	2300      	movs	r3, #0
 8000920:	74fb      	strb	r3, [r7, #19]
 8000922:	e01f      	b.n	8000964 <Gateway_SendTestFrames+0x254>
          else if (CAN1->TSR & CAN_TSR_TME1) mailbox = 1;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <Gateway_SendTestFrames+0x230>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800092c:	2b00      	cmp	r3, #0
 800092e:	d011      	beq.n	8000954 <Gateway_SendTestFrames+0x244>
 8000930:	2301      	movs	r3, #1
 8000932:	74fb      	strb	r3, [r7, #19]
 8000934:	e016      	b.n	8000964 <Gateway_SendTestFrames+0x254>
 8000936:	bf00      	nop
 8000938:	200001cc 	.word	0x200001cc
 800093c:	0800215c 	.word	0x0800215c
 8000940:	40006400 	.word	0x40006400
 8000944:	20000000 	.word	0x20000000
 8000948:	0019a27f 	.word	0x0019a27f
 800094c:	20000002 	.word	0x20000002
 8000950:	20200000 	.word	0x20200000
          else if (CAN1->TSR & CAN_TSR_TME2) mailbox = 2;
 8000954:	4b3a      	ldr	r3, [pc, #232]	@ (8000a40 <Gateway_SendTestFrames+0x330>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <Gateway_SendTestFrames+0x254>
 8000960:	2302      	movs	r3, #2
 8000962:	74fb      	strb	r3, [r7, #19]
          
          /* Send Vehicle Speed frame (ID 0x102) */
          uint16_t speed_raw = test_speed * 10;
 8000964:	4b37      	ldr	r3, [pc, #220]	@ (8000a44 <Gateway_SendTestFrames+0x334>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	4413      	add	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	81bb      	strh	r3, [r7, #12]
          CAN1->sTxMailBox[mailbox].TIR = (0x102 << CAN_TI0R_STID_Pos);
 8000972:	4a33      	ldr	r2, [pc, #204]	@ (8000a40 <Gateway_SendTestFrames+0x330>)
 8000974:	7cfb      	ldrb	r3, [r7, #19]
 8000976:	3318      	adds	r3, #24
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	4413      	add	r3, r2
 800097c:	f04f 5201 	mov.w	r2, #541065216	@ 0x20400000
 8000980:	601a      	str	r2, [r3, #0]
          CAN1->sTxMailBox[mailbox].TDTR = 8; /* DLC = 8 */
 8000982:	4a2f      	ldr	r2, [pc, #188]	@ (8000a40 <Gateway_SendTestFrames+0x330>)
 8000984:	7cfb      	ldrb	r3, [r7, #19]
 8000986:	3318      	adds	r3, #24
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	4413      	add	r3, r2
 800098c:	3304      	adds	r3, #4
 800098e:	2208      	movs	r2, #8
 8000990:	601a      	str	r2, [r3, #0]
          CAN1->sTxMailBox[mailbox].TDLR = 0;
 8000992:	4a2b      	ldr	r2, [pc, #172]	@ (8000a40 <Gateway_SendTestFrames+0x330>)
 8000994:	7cfb      	ldrb	r3, [r7, #19]
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	4413      	add	r3, r2
 800099a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
          CAN1->sTxMailBox[mailbox].TDHR = (speed_raw & 0xFF) | ((speed_raw >> 8) << 8); /* Bytes 4-5 */
 80009a2:	89bb      	ldrh	r3, [r7, #12]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	89bb      	ldrh	r3, [r7, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	ea42 0103 	orr.w	r1, r2, r3
 80009b2:	4a23      	ldr	r2, [pc, #140]	@ (8000a40 <Gateway_SendTestFrames+0x330>)
 80009b4:	7cfb      	ldrb	r3, [r7, #19]
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	4413      	add	r3, r2
 80009ba:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80009be:	6019      	str	r1, [r3, #0]
          CAN1->sTxMailBox[mailbox].TIR |= CAN_TI0R_TXRQ;
 80009c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <Gateway_SendTestFrames+0x330>)
 80009c2:	7cfb      	ldrb	r3, [r7, #19]
 80009c4:	3318      	adds	r3, #24
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	4413      	add	r3, r2
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	491c      	ldr	r1, [pc, #112]	@ (8000a40 <Gateway_SendTestFrames+0x330>)
 80009ce:	7cfb      	ldrb	r3, [r7, #19]
 80009d0:	f042 0201 	orr.w	r2, r2, #1
 80009d4:	3318      	adds	r3, #24
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	440b      	add	r3, r1
 80009da:	601a      	str	r2, [r3, #0]
        }
      }
    }
    
    /* Update test values for next iteration */
    test_rpm += 100;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <Gateway_SendTestFrames+0x338>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	3364      	adds	r3, #100	@ 0x64
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <Gateway_SendTestFrames+0x338>)
 80009e6:	801a      	strh	r2, [r3, #0]
    if (test_rpm > 6000) test_rpm = 1000;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <Gateway_SendTestFrames+0x338>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	f241 7270 	movw	r2, #6000	@ 0x1770
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d903      	bls.n	80009fc <Gateway_SendTestFrames+0x2ec>
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <Gateway_SendTestFrames+0x338>)
 80009f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009fa:	801a      	strh	r2, [r3, #0]
    
    test_temp += 5;
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <Gateway_SendTestFrames+0x33c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	3305      	adds	r3, #5
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <Gateway_SendTestFrames+0x33c>)
 8000a06:	701a      	strb	r2, [r3, #0]
    if (test_temp > 110) test_temp = 80;
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <Gateway_SendTestFrames+0x33c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8000a0e:	d902      	bls.n	8000a16 <Gateway_SendTestFrames+0x306>
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <Gateway_SendTestFrames+0x33c>)
 8000a12:	2250      	movs	r2, #80	@ 0x50
 8000a14:	701a      	strb	r2, [r3, #0]
    
    test_speed += 10;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <Gateway_SendTestFrames+0x334>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	330a      	adds	r3, #10
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <Gateway_SendTestFrames+0x334>)
 8000a20:	801a      	strh	r2, [r3, #0]
    if (test_speed > 120) test_speed = 50;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <Gateway_SendTestFrames+0x334>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	2b78      	cmp	r3, #120	@ 0x78
 8000a28:	d902      	bls.n	8000a30 <Gateway_SendTestFrames+0x320>
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <Gateway_SendTestFrames+0x334>)
 8000a2c:	2232      	movs	r2, #50	@ 0x32
 8000a2e:	801a      	strh	r2, [r3, #0]
    
    /* Debug message */
    UART_Write("Test frame sent, values updated\r\n");
 8000a30:	4807      	ldr	r0, [pc, #28]	@ (8000a50 <Gateway_SendTestFrames+0x340>)
 8000a32:	f000 fceb 	bl	800140c <UART_Write>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40006400 	.word	0x40006400
 8000a44:	20000004 	.word	0x20000004
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000002 	.word	0x20000002
 8000a50:	08002178 	.word	0x08002178

08000a54 <Gateway_ProcessCanMessages>:
 * @brief  Process incoming CAN messages
 * @param  None
 * @retval None
 */
static void Gateway_ProcessCanMessages(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
  CanFrame_t frame;
  
  /* Process all available CAN frames */
  while (CAN_Receive(&frame)) {
 8000a5a:	e003      	b.n	8000a64 <Gateway_ProcessCanMessages+0x10>
    Router_ProcessCanFrame(&frame);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f858 	bl	8000b14 <Router_ProcessCanFrame>
  while (CAN_Receive(&frame)) {
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fc0a 	bl	8000280 <CAN_Receive>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1f4      	bne.n	8000a5c <Gateway_ProcessCanMessages+0x8>
  }
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <Gateway_PrintStatistics>:
 * @brief  Print statistics periodically
 * @param  None
 * @retval None
 */
static void Gateway_PrintStatistics(void)
{
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b0aa      	sub	sp, #168	@ 0xa8
 8000a80:	af04      	add	r7, sp, #16
  static uint32_t stats_counter = 0;
  
  /* Check if it's time to print statistics (every 10 seconds) */
  stats_counter++;
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <Gateway_PrintStatistics+0x64>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a15      	ldr	r2, [pc, #84]	@ (8000ae0 <Gateway_PrintStatistics+0x64>)
 8000a8a:	6013      	str	r3, [r2, #0]
  if (stats_counter >= STATS_PRINT_INTERVAL_MS) {
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <Gateway_PrintStatistics+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d91e      	bls.n	8000ad6 <Gateway_PrintStatistics+0x5a>
    stats_counter = 0;  /* Reset counter */
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <Gateway_PrintStatistics+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
    
    RouterStats_t stats;
    Router_GetStatistics(&stats);
 8000a9e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f912 	bl	8000ccc <Router_GetStatistics>
    
    /* Format and send statistics */
    char stats_msg[128];
    sprintf(stats_msg, "STATS,Processed:%lu,Routed:%lu,Dropped:%lu,CANErr:%lu,UARTErr:%lu\r\n",
 8000aa8:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8000aac:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 8000ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ab4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000ab8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8000abc:	1d38      	adds	r0, r7, #4
 8000abe:	9102      	str	r1, [sp, #8]
 8000ac0:	9201      	str	r2, [sp, #4]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	462b      	mov	r3, r5
 8000ac6:	4622      	mov	r2, r4
 8000ac8:	4906      	ldr	r1, [pc, #24]	@ (8000ae4 <Gateway_PrintStatistics+0x68>)
 8000aca:	f000 fe69 	bl	80017a0 <siprintf>
            stats.frames_processed, stats.frames_routed, stats.frames_dropped,
            stats.can_errors, stats.uart_errors);
    
    UART_Write(stats_msg);
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fc9b 	bl	800140c <UART_Write>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3798      	adds	r7, #152	@ 0x98
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200001d0 	.word	0x200001d0
 8000ae4:	0800219c 	.word	0x0800219c

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <Error_Handler+0x8>

08000af4 <Router_Init>:
 * @brief  Initialize PDU Router
 * @param  None
 * @retval None
 */
void Router_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    /* Clear statistics */
    Router_ClearStatistics();
 8000af8:	f000 f8fe 	bl	8000cf8 <Router_ClearStatistics>
    
    /* Send startup message */
    UART_Write("Gateway ECU Started\r\n");
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <Router_Init+0x18>)
 8000afe:	f000 fc85 	bl	800140c <UART_Write>
    UART_Write("Monitoring CAN IDs: 0x100, 0x101, 0x102\r\n");
 8000b02:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <Router_Init+0x1c>)
 8000b04:	f000 fc82 	bl	800140c <UART_Write>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	0800222c 	.word	0x0800222c
 8000b10:	08002244 	.word	0x08002244

08000b14 <Router_ProcessCanFrame>:
 * @brief  Process received CAN frame
 * @param  frame: Pointer to CAN frame
 * @retval None
 */
void Router_ProcessCanFrame(const CanFrame_t* frame)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	@ 0x50
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    if (frame == NULL) return;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d042      	beq.n	8000ba8 <Router_ProcessCanFrame+0x94>
    
    router_stats.frames_processed++;
 8000b22:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <Router_ProcessCanFrame+0x9c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	4a21      	ldr	r2, [pc, #132]	@ (8000bb0 <Router_ProcessCanFrame+0x9c>)
 8000b2a:	6013      	str	r3, [r2, #0]
    
    /* Find signal configuration for this CAN ID */
    const SignalConfig_t* config = FindSignalConfig(frame->id);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f8ed 	bl	8000d10 <FindSignalConfig>
 8000b36:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (config == NULL) {
 8000b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d105      	bne.n	8000b4a <Router_ProcessCanFrame+0x36>
        router_stats.frames_dropped++;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb0 <Router_ProcessCanFrame+0x9c>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb0 <Router_ProcessCanFrame+0x9c>)
 8000b46:	6093      	str	r3, [r2, #8]
        return;
 8000b48:	e02f      	b.n	8000baa <Router_ProcessCanFrame+0x96>
    }
    
    /* Validate DLC */
    if (frame->dlc < (config->start_byte + config->length)) {
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b52:	791b      	ldrb	r3, [r3, #4]
 8000b54:	4619      	mov	r1, r3
 8000b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b58:	795b      	ldrb	r3, [r3, #5]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	da12      	bge.n	8000b86 <Router_ProcessCanFrame+0x72>
        router_stats.frames_dropped++;
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <Router_ProcessCanFrame+0x9c>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <Router_ProcessCanFrame+0x9c>)
 8000b68:	6093      	str	r3, [r2, #8]
        char error_msg[64];
        sprintf(error_msg, "CAN_ERR,INVALID_DLC,ID:0x%03X\r\n", (unsigned int)frame->id);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4910      	ldr	r1, [pc, #64]	@ (8000bb4 <Router_ProcessCanFrame+0xa0>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fe13 	bl	80017a0 <siprintf>
        UART_Write(error_msg);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fc44 	bl	800140c <UART_Write>
 8000b84:	e011      	b.n	8000baa <Router_ProcessCanFrame+0x96>
        return;
    }
    
    /* Extract signal value */
    uint32_t raw_value = ExtractSignalValue(frame->data, config);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3305      	adds	r3, #5
 8000b8a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 f8e9 	bl	8000d64 <ExtractSignalValue>
 8000b92:	64b8      	str	r0, [r7, #72]	@ 0x48
    
    /* Format and send via UART */
    FormatAndSendSignal(config, raw_value);
 8000b94:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000b96:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000b98:	f000 f938 	bl	8000e0c <FormatAndSendSignal>
    
    router_stats.frames_routed++;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <Router_ProcessCanFrame+0x9c>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a03      	ldr	r2, [pc, #12]	@ (8000bb0 <Router_ProcessCanFrame+0x9c>)
 8000ba4:	6053      	str	r3, [r2, #4]
 8000ba6:	e000      	b.n	8000baa <Router_ProcessCanFrame+0x96>
    if (frame == NULL) return;
 8000ba8:	bf00      	nop
}
 8000baa:	3750      	adds	r7, #80	@ 0x50
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200001d4 	.word	0x200001d4
 8000bb4:	08002270 	.word	0x08002270

08000bb8 <Router_Poll>:
 * @brief  Poll router for periodic tasks
 * @param  None
 * @retval None
 */
void Router_Poll(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
    /* Check for CAN errors */
    CanError_t can_error = CAN_GetLastError();
 8000bbe:	f7ff fba3 	bl	8000308 <CAN_GetLastError>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
    if (can_error != CAN_ERROR_NONE) {
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d02e      	beq.n	8000c2a <Router_Poll+0x72>
        router_stats.can_errors++;
 8000bcc:	4b34      	ldr	r3, [pc, #208]	@ (8000ca0 <Router_Poll+0xe8>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a33      	ldr	r2, [pc, #204]	@ (8000ca0 <Router_Poll+0xe8>)
 8000bd4:	6113      	str	r3, [r2, #16]
        
        switch (can_error) {
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d81e      	bhi.n	8000c1c <Router_Poll+0x64>
 8000bde:	a201      	add	r2, pc, #4	@ (adr r2, 8000be4 <Router_Poll+0x2c>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000bf5 	.word	0x08000bf5
 8000be8:	08000bff 	.word	0x08000bff
 8000bec:	08000c09 	.word	0x08000c09
 8000bf0:	08000c13 	.word	0x08000c13
            case CAN_ERROR_BUS_OFF:
                SendErrorMessage("CAN_ERR", "BUS_OFF");
 8000bf4:	492b      	ldr	r1, [pc, #172]	@ (8000ca4 <Router_Poll+0xec>)
 8000bf6:	482c      	ldr	r0, [pc, #176]	@ (8000ca8 <Router_Poll+0xf0>)
 8000bf8:	f000 f942 	bl	8000e80 <SendErrorMessage>
                break;
 8000bfc:	e013      	b.n	8000c26 <Router_Poll+0x6e>
            case CAN_ERROR_ERROR_PASSIVE:
                SendErrorMessage("CAN_ERR", "ERROR_PASSIVE");
 8000bfe:	492b      	ldr	r1, [pc, #172]	@ (8000cac <Router_Poll+0xf4>)
 8000c00:	4829      	ldr	r0, [pc, #164]	@ (8000ca8 <Router_Poll+0xf0>)
 8000c02:	f000 f93d 	bl	8000e80 <SendErrorMessage>
                break;
 8000c06:	e00e      	b.n	8000c26 <Router_Poll+0x6e>
            case CAN_ERROR_WARNING:
                SendErrorMessage("CAN_ERR", "WARNING");
 8000c08:	4929      	ldr	r1, [pc, #164]	@ (8000cb0 <Router_Poll+0xf8>)
 8000c0a:	4827      	ldr	r0, [pc, #156]	@ (8000ca8 <Router_Poll+0xf0>)
 8000c0c:	f000 f938 	bl	8000e80 <SendErrorMessage>
                break;
 8000c10:	e009      	b.n	8000c26 <Router_Poll+0x6e>
            case CAN_ERROR_OVERRUN:
                SendErrorMessage("CAN_ERR", "OVERRUN");
 8000c12:	4928      	ldr	r1, [pc, #160]	@ (8000cb4 <Router_Poll+0xfc>)
 8000c14:	4824      	ldr	r0, [pc, #144]	@ (8000ca8 <Router_Poll+0xf0>)
 8000c16:	f000 f933 	bl	8000e80 <SendErrorMessage>
                break;
 8000c1a:	e004      	b.n	8000c26 <Router_Poll+0x6e>
            default:
                SendErrorMessage("CAN_ERR", "UNKNOWN");
 8000c1c:	4926      	ldr	r1, [pc, #152]	@ (8000cb8 <Router_Poll+0x100>)
 8000c1e:	4822      	ldr	r0, [pc, #136]	@ (8000ca8 <Router_Poll+0xf0>)
 8000c20:	f000 f92e 	bl	8000e80 <SendErrorMessage>
                break;
 8000c24:	bf00      	nop
        }
        
        CAN_ClearError();
 8000c26:	f7ff fb7b 	bl	8000320 <CAN_ClearError>
    }
    
    /* Check for UART errors */
    UartError_t uart_error = UART_GetLastError();
 8000c2a:	f000 fc65 	bl	80014f8 <UART_GetLastError>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71bb      	strb	r3, [r7, #6]
    if (uart_error != UART_ERROR_NONE) {
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d02e      	beq.n	8000c96 <Router_Poll+0xde>
        router_stats.uart_errors++;
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <Router_Poll+0xe8>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <Router_Poll+0xe8>)
 8000c40:	60d3      	str	r3, [r2, #12]
        
        switch (uart_error) {
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d81e      	bhi.n	8000c88 <Router_Poll+0xd0>
 8000c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c50 <Router_Poll+0x98>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c61 	.word	0x08000c61
 8000c54:	08000c6b 	.word	0x08000c6b
 8000c58:	08000c75 	.word	0x08000c75
 8000c5c:	08000c7f 	.word	0x08000c7f
            case UART_ERROR_OVERRUN:
                SendErrorMessage("UART_ERR", "OVERRUN");
 8000c60:	4914      	ldr	r1, [pc, #80]	@ (8000cb4 <Router_Poll+0xfc>)
 8000c62:	4816      	ldr	r0, [pc, #88]	@ (8000cbc <Router_Poll+0x104>)
 8000c64:	f000 f90c 	bl	8000e80 <SendErrorMessage>
                break;
 8000c68:	e013      	b.n	8000c92 <Router_Poll+0xda>
            case UART_ERROR_FRAMING:
                SendErrorMessage("UART_ERR", "FRAMING");
 8000c6a:	4915      	ldr	r1, [pc, #84]	@ (8000cc0 <Router_Poll+0x108>)
 8000c6c:	4813      	ldr	r0, [pc, #76]	@ (8000cbc <Router_Poll+0x104>)
 8000c6e:	f000 f907 	bl	8000e80 <SendErrorMessage>
                break;
 8000c72:	e00e      	b.n	8000c92 <Router_Poll+0xda>
            case UART_ERROR_PARITY:
                SendErrorMessage("UART_ERR", "PARITY");
 8000c74:	4913      	ldr	r1, [pc, #76]	@ (8000cc4 <Router_Poll+0x10c>)
 8000c76:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <Router_Poll+0x104>)
 8000c78:	f000 f902 	bl	8000e80 <SendErrorMessage>
                break;
 8000c7c:	e009      	b.n	8000c92 <Router_Poll+0xda>
            case UART_ERROR_BUFFER_FULL:
                SendErrorMessage("UART_ERR", "BUFFER_FULL");
 8000c7e:	4912      	ldr	r1, [pc, #72]	@ (8000cc8 <Router_Poll+0x110>)
 8000c80:	480e      	ldr	r0, [pc, #56]	@ (8000cbc <Router_Poll+0x104>)
 8000c82:	f000 f8fd 	bl	8000e80 <SendErrorMessage>
                break;
 8000c86:	e004      	b.n	8000c92 <Router_Poll+0xda>
            default:
                SendErrorMessage("UART_ERR", "UNKNOWN");
 8000c88:	490b      	ldr	r1, [pc, #44]	@ (8000cb8 <Router_Poll+0x100>)
 8000c8a:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <Router_Poll+0x104>)
 8000c8c:	f000 f8f8 	bl	8000e80 <SendErrorMessage>
                break;
 8000c90:	bf00      	nop
        }
        
        UART_ClearError();
 8000c92:	f000 fc3d 	bl	8001510 <UART_ClearError>
    }
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001d4 	.word	0x200001d4
 8000ca4:	08002290 	.word	0x08002290
 8000ca8:	08002298 	.word	0x08002298
 8000cac:	080022a0 	.word	0x080022a0
 8000cb0:	080022b0 	.word	0x080022b0
 8000cb4:	080022b8 	.word	0x080022b8
 8000cb8:	080022c0 	.word	0x080022c0
 8000cbc:	080022c8 	.word	0x080022c8
 8000cc0:	080022d4 	.word	0x080022d4
 8000cc4:	080022dc 	.word	0x080022dc
 8000cc8:	080022e4 	.word	0x080022e4

08000ccc <Router_GetStatistics>:
 * @brief  Get router statistics
 * @param  stats: Pointer to statistics structure
 * @retval None
 */
void Router_GetStatistics(RouterStats_t* stats)
{
 8000ccc:	b4b0      	push	{r4, r5, r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    if (stats != NULL) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d007      	beq.n	8000cea <Router_GetStatistics+0x1e>
        *stats = router_stats;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <Router_GetStatistics+0x28>)
 8000cde:	461c      	mov	r4, r3
 8000ce0:	4615      	mov	r5, r2
 8000ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	6023      	str	r3, [r4, #0]
    }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bcb0      	pop	{r4, r5, r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	200001d4 	.word	0x200001d4

08000cf8 <Router_ClearStatistics>:
 * @brief  Clear router statistics
 * @param  None
 * @retval None
 */
void Router_ClearStatistics(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
    memset(&router_stats, 0, sizeof(RouterStats_t));
 8000cfc:	2214      	movs	r2, #20
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <Router_ClearStatistics+0x14>)
 8000d02:	f000 fd6d 	bl	80017e0 <memset>
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200001d4 	.word	0x200001d4

08000d10 <FindSignalConfig>:
 * @brief  Find signal configuration for CAN ID
 * @param  can_id: CAN identifier
 * @retval Pointer to signal configuration, NULL if not found
 */
static const SignalConfig_t* FindSignalConfig(uint32_t can_id)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < SIGNAL_TABLE_SIZE; i++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	e015      	b.n	8000d4a <FindSignalConfig+0x3a>
        if (signal_table[i].can_id == can_id) {
 8000d1e:	4910      	ldr	r1, [pc, #64]	@ (8000d60 <FindSignalConfig+0x50>)
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d107      	bne.n	8000d44 <FindSignalConfig+0x34>
            return &signal_table[i];
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <FindSignalConfig+0x50>)
 8000d40:	4413      	add	r3, r2
 8000d42:	e006      	b.n	8000d52 <FindSignalConfig+0x42>
    for (int i = 0; i < SIGNAL_TABLE_SIZE; i++) {
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	dde6      	ble.n	8000d1e <FindSignalConfig+0xe>
        }
    }
    return NULL;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	080022f8 	.word	0x080022f8

08000d64 <ExtractSignalValue>:
 * @param  data: Pointer to CAN data bytes
 * @param  config: Signal configuration
 * @retval Extracted raw signal value
 */
static uint32_t ExtractSignalValue(const uint8_t* data, const SignalConfig_t* config)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
    uint32_t value = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
    
    /* Extract bytes based on signal length */
    switch (config->length) {
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	795b      	ldrb	r3, [r3, #5]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d01e      	beq.n	8000db8 <ExtractSignalValue+0x54>
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	dc3c      	bgt.n	8000df8 <ExtractSignalValue+0x94>
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d002      	beq.n	8000d88 <ExtractSignalValue+0x24>
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d008      	beq.n	8000d98 <ExtractSignalValue+0x34>
 8000d86:	e037      	b.n	8000df8 <ExtractSignalValue+0x94>
        case 1:
            value = data[config->start_byte];
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
            break;
 8000d96:	e032      	b.n	8000dfe <ExtractSignalValue+0x9a>
            
        case 2:
            /* Little-endian extraction */
            value = (data[config->start_byte + 1] << 8) | data[config->start_byte];
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	791b      	ldrb	r3, [r3, #4]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	7912      	ldrb	r2, [r2, #4]
 8000daa:	4611      	mov	r1, r2
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	440a      	add	r2, r1
 8000db0:	7812      	ldrb	r2, [r2, #0]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
            break;
 8000db6:	e022      	b.n	8000dfe <ExtractSignalValue+0x9a>
            
        case 4:
            /* Little-endian extraction */
            value = (data[config->start_byte + 3] << 24) |
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	3303      	adds	r3, #3
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	061a      	lsls	r2, r3, #24
                   (data[config->start_byte + 2] << 16) |
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	3302      	adds	r3, #2
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	440b      	add	r3, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	041b      	lsls	r3, r3, #16
            value = (data[config->start_byte + 3] << 24) |
 8000dd4:	431a      	orrs	r2, r3
                   (data[config->start_byte + 1] << 8) |
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	440b      	add	r3, r1
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	021b      	lsls	r3, r3, #8
                   (data[config->start_byte + 2] << 16) |
 8000de4:	4313      	orrs	r3, r2
                   data[config->start_byte];
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	7912      	ldrb	r2, [r2, #4]
 8000dea:	4611      	mov	r1, r2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	440a      	add	r2, r1
 8000df0:	7812      	ldrb	r2, [r2, #0]
                   (data[config->start_byte + 1] << 8) |
 8000df2:	4313      	orrs	r3, r2
            value = (data[config->start_byte + 3] << 24) |
 8000df4:	60fb      	str	r3, [r7, #12]
            break;
 8000df6:	e002      	b.n	8000dfe <ExtractSignalValue+0x9a>
            
        default:
            value = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
            break;
 8000dfc:	bf00      	nop
    }
    
    return value;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <FormatAndSendSignal>:
 * @param  config: Signal configuration
 * @param  raw_value: Raw signal value
 * @retval None
 */
static void FormatAndSendSignal(const SignalConfig_t* config, uint32_t raw_value)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b096      	sub	sp, #88	@ 0x58
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
    char output_buffer[MAX_OUTPUT_LENGTH];
    
    /* Apply scaling and offset */
    float eng_value = (raw_value * config->scale) + config->offset;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	ee07 3a90 	vmov	s15, r3
 8000e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e34:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    int32_t rounded_value = (int32_t)(eng_value + 0.5f); /* Round to nearest integer */
 8000e38:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000e3c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e48:	ee17 3a90 	vmov	r3, s15
 8000e4c:	653b      	str	r3, [r7, #80]	@ 0x50
    
    /* Format according to configuration */
    int length = sprintf(output_buffer, config->format_string, rounded_value);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6919      	ldr	r1, [r3, #16]
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fca1 	bl	80017a0 <siprintf>
 8000e5e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    
    /* Ensure string is properly terminated and within bounds */
    if (length > 0 && length < MAX_OUTPUT_LENGTH) {
 8000e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dd07      	ble.n	8000e76 <FormatAndSendSignal+0x6a>
 8000e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e68:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e6a:	dc04      	bgt.n	8000e76 <FormatAndSendSignal+0x6a>
        UART_Write(output_buffer);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 facb 	bl	800140c <UART_Write>
    }
}
 8000e76:	bf00      	nop
 8000e78:	3758      	adds	r7, #88	@ 0x58
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <SendErrorMessage>:
 * @param  error_type: Error type string
 * @param  details: Error details string
 * @retval None
 */
static void SendErrorMessage(const char* error_type, const char* details)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	@ 0x50
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
    char error_buffer[MAX_OUTPUT_LENGTH];
    int length = sprintf(error_buffer, "%s,%s\r\n", error_type, details);
 8000e8a:	f107 000c 	add.w	r0, r7, #12
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4909      	ldr	r1, [pc, #36]	@ (8000eb8 <SendErrorMessage+0x38>)
 8000e94:	f000 fc84 	bl	80017a0 <siprintf>
 8000e98:	64f8      	str	r0, [r7, #76]	@ 0x4c
    
    if (length > 0 && length < MAX_OUTPUT_LENGTH) {
 8000e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	dd07      	ble.n	8000eb0 <SendErrorMessage+0x30>
 8000ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ea2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ea4:	dc04      	bgt.n	8000eb0 <SendErrorMessage+0x30>
        UART_Write(error_buffer);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 faae 	bl	800140c <UART_Write>
    }
}
 8000eb0:	bf00      	nop
 8000eb2:	3750      	adds	r7, #80	@ 0x50
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	080022f0 	.word	0x080022f0

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 fc25 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  CAN_IRQHandler();
 8000f1e:	f7ff fa11 	bl	8000344 <CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  UART_IRQHandler();
 8000f2a:	f000 fb03 	bl	8001534 <UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f000 fc44 	bl	80017f0 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20020000 	.word	0x20020000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	200001e8 	.word	0x200001e8
 8000f9c:	200004c8 	.word	0x200004c8

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4907      	ldr	r1, [pc, #28]	@ (8001020 <__NVIC_EnableIRQ+0x38>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	@ (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	@ (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	@ 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <SystemConfig_Init>:
 * @brief  Initialize system configuration
 * @param  None
 * @retval None
 */
void SystemConfig_Init(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
    /* Configure system clock to 168 MHz */
    SystemClock_Config();
 80010e2:	f000 f807 	bl	80010f4 <SystemClock_Config>
    
    /* Configure GPIO for CAN and UART */
    GPIO_Config();
 80010e6:	f000 f84b 	bl	8001180 <GPIO_Config>
    
    /* Configure NVIC priorities */
    NVIC_Config();
 80010ea:	f000 f8ed 	bl	80012c8 <NVIC_Config>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <SystemClock_Config>:
 *         APB2 Prescaler = 2 (APB2 = 84 MHz)
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
    /* Enable HSE oscillator */
    RCC->CR |= RCC_CR_HSEON;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <SystemClock_Config+0x78>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <SystemClock_Config+0x78>)
 80010fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001102:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8001104:	bf00      	nop
 8001106:	4b19      	ldr	r3, [pc, #100]	@ (800116c <SystemClock_Config+0x78>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f9      	beq.n	8001106 <SystemClock_Config+0x12>
    
    /* Configure Flash latency for 168 MHz operation */
    FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001112:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <SystemClock_Config+0x7c>)
 8001114:	f240 6205 	movw	r2, #1541	@ 0x605
 8001118:	601a      	str	r2, [r3, #0]
    
    /* Configure PLL: HSE * (N/M) / P = 8 * (336/8) / 2 = 168 MHz */
    RCC->PLLCFGR = (8 << RCC_PLLCFGR_PLLM_Pos) |      /* M = 8 */
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <SystemClock_Config+0x78>)
 800111c:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <SystemClock_Config+0x80>)
 800111e:	605a      	str	r2, [r3, #4]
                   (0 << RCC_PLLCFGR_PLLP_Pos) |       /* P = 2 */
                   (7 << RCC_PLLCFGR_PLLQ_Pos) |       /* Q = 7 */
                   RCC_PLLCFGR_PLLSRC_HSE;              /* HSE as source */
    
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <SystemClock_Config+0x78>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a11      	ldr	r2, [pc, #68]	@ (800116c <SystemClock_Config+0x78>)
 8001126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800112a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 800112c:	bf00      	nop
 800112e:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <SystemClock_Config+0x78>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f9      	beq.n	800112e <SystemClock_Config+0x3a>
    
    /* Configure AHB, APB1, APB2 prescalers */
    RCC->CFGR = RCC_CFGR_HPRE_DIV1 |        /* AHB = SYSCLK/1 = 168 MHz */
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <SystemClock_Config+0x78>)
 800113c:	f44f 4214 	mov.w	r2, #37888	@ 0x9400
 8001140:	609a      	str	r2, [r3, #8]
                RCC_CFGR_PPRE1_DIV4 |        /* APB1 = HCLK/4 = 42 MHz */
                RCC_CFGR_PPRE2_DIV2;         /* APB2 = HCLK/2 = 84 MHz */
    
    /* Select PLL as system clock */
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <SystemClock_Config+0x78>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	4a09      	ldr	r2, [pc, #36]	@ (800116c <SystemClock_Config+0x78>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800114e:	bf00      	nop
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <SystemClock_Config+0x78>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d1f9      	bne.n	8001150 <SystemClock_Config+0x5c>
    
    /* Update SystemCoreClock variable */
    SystemCoreClock = SYSTEM_CLOCK_FREQ;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <SystemClock_Config+0x84>)
 800115e:	4a07      	ldr	r2, [pc, #28]	@ (800117c <SystemClock_Config+0x88>)
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40023800 	.word	0x40023800
 8001170:	40023c00 	.word	0x40023c00
 8001174:	07405408 	.word	0x07405408
 8001178:	20000008 	.word	0x20000008
 800117c:	0a037a00 	.word	0x0a037a00

08001180 <GPIO_Config>:
 * @brief  Configure GPIO pins for CAN and UART
 * @param  None
 * @retval None
 */
void GPIO_Config(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    /* Enable GPIO clocks */
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8001184:	4b4d      	ldr	r3, [pc, #308]	@ (80012bc <GPIO_Config+0x13c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	4a4c      	ldr	r2, [pc, #304]	@ (80012bc <GPIO_Config+0x13c>)
 800118a:	f043 0303 	orr.w	r3, r3, #3
 800118e:	6313      	str	r3, [r2, #48]	@ 0x30
    
    /* Configure CAN1 pins (PA11, PA12) */
    /* PA11 - CAN1_RX: Alternate Function, Pull-up */
    GPIOA->MODER &= ~(GPIO_MODER_MODE11);
 8001190:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <GPIO_Config+0x140>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a4a      	ldr	r2, [pc, #296]	@ (80012c0 <GPIO_Config+0x140>)
 8001196:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800119a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODE11_1;        /* Alternate function */
 800119c:	4b48      	ldr	r3, [pc, #288]	@ (80012c0 <GPIO_Config+0x140>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a47      	ldr	r2, [pc, #284]	@ (80012c0 <GPIO_Config+0x140>)
 80011a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011a6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD11);
 80011a8:	4b45      	ldr	r3, [pc, #276]	@ (80012c0 <GPIO_Config+0x140>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a44      	ldr	r2, [pc, #272]	@ (80012c0 <GPIO_Config+0x140>)
 80011ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011b2:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= GPIO_PUPDR_PUPD11_0;        /* Pull-up */
 80011b4:	4b42      	ldr	r3, [pc, #264]	@ (80012c0 <GPIO_Config+0x140>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4a41      	ldr	r2, [pc, #260]	@ (80012c0 <GPIO_Config+0x140>)
 80011ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011be:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[1] &= ~(GPIO_AFRH_AFSEL11);
 80011c0:	4b3f      	ldr	r3, [pc, #252]	@ (80012c0 <GPIO_Config+0x140>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c4:	4a3e      	ldr	r2, [pc, #248]	@ (80012c0 <GPIO_Config+0x140>)
 80011c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80011ca:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (GPIO_AF9_CAN1 << GPIO_AFRH_AFSEL11_Pos);
 80011cc:	4b3c      	ldr	r3, [pc, #240]	@ (80012c0 <GPIO_Config+0x140>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	4a3b      	ldr	r2, [pc, #236]	@ (80012c0 <GPIO_Config+0x140>)
 80011d2:	f443 4310 	orr.w	r3, r3, #36864	@ 0x9000
 80011d6:	6253      	str	r3, [r2, #36]	@ 0x24
    
    /* PA12 - CAN1_TX: Alternate Function, Push-pull */
    GPIOA->MODER &= ~(GPIO_MODER_MODE12);
 80011d8:	4b39      	ldr	r3, [pc, #228]	@ (80012c0 <GPIO_Config+0x140>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a38      	ldr	r2, [pc, #224]	@ (80012c0 <GPIO_Config+0x140>)
 80011de:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80011e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODE12_1;        /* Alternate function */
 80011e4:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <GPIO_Config+0x140>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a35      	ldr	r2, [pc, #212]	@ (80012c0 <GPIO_Config+0x140>)
 80011ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ee:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT12;         /* Push-pull */
 80011f0:	4b33      	ldr	r3, [pc, #204]	@ (80012c0 <GPIO_Config+0x140>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a32      	ldr	r2, [pc, #200]	@ (80012c0 <GPIO_Config+0x140>)
 80011f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011fa:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED12;    /* High speed */
 80011fc:	4b30      	ldr	r3, [pc, #192]	@ (80012c0 <GPIO_Config+0x140>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a2f      	ldr	r2, [pc, #188]	@ (80012c0 <GPIO_Config+0x140>)
 8001202:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8001206:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[1] &= ~(GPIO_AFRH_AFSEL12);
 8001208:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <GPIO_Config+0x140>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	4a2c      	ldr	r2, [pc, #176]	@ (80012c0 <GPIO_Config+0x140>)
 800120e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001212:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (GPIO_AF9_CAN1 << GPIO_AFRH_AFSEL12_Pos);
 8001214:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <GPIO_Config+0x140>)
 8001216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001218:	4a29      	ldr	r2, [pc, #164]	@ (80012c0 <GPIO_Config+0x140>)
 800121a:	f443 2310 	orr.w	r3, r3, #589824	@ 0x90000
 800121e:	6253      	str	r3, [r2, #36]	@ 0x24
    
    /* Configure USART3 pins (PB10, PB11) */
    /* PB10 - USART3_TX: Alternate Function, Push-pull */
    GPIOB->MODER &= ~(GPIO_MODER_MODE10);
 8001220:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <GPIO_Config+0x144>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a27      	ldr	r2, [pc, #156]	@ (80012c4 <GPIO_Config+0x144>)
 8001226:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800122a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE10_1;        /* Alternate function */
 800122c:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <GPIO_Config+0x144>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a24      	ldr	r2, [pc, #144]	@ (80012c4 <GPIO_Config+0x144>)
 8001232:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001236:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~GPIO_OTYPER_OT10;         /* Push-pull */
 8001238:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <GPIO_Config+0x144>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a21      	ldr	r2, [pc, #132]	@ (80012c4 <GPIO_Config+0x144>)
 800123e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001242:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED10;    /* High speed */
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <GPIO_Config+0x144>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a1e      	ldr	r2, [pc, #120]	@ (80012c4 <GPIO_Config+0x144>)
 800124a:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800124e:	6093      	str	r3, [r2, #8]
    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10);
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <GPIO_Config+0x144>)
 8001252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001254:	4a1b      	ldr	r2, [pc, #108]	@ (80012c4 <GPIO_Config+0x144>)
 8001256:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800125a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (GPIO_AF7_USART3 << GPIO_AFRH_AFSEL10_Pos);
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <GPIO_Config+0x144>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001260:	4a18      	ldr	r2, [pc, #96]	@ (80012c4 <GPIO_Config+0x144>)
 8001262:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001266:	6253      	str	r3, [r2, #36]	@ 0x24
    
    /* PB11 - USART3_RX: Alternate Function, Pull-up */
    GPIOB->MODER &= ~(GPIO_MODER_MODE11);
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <GPIO_Config+0x144>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a15      	ldr	r2, [pc, #84]	@ (80012c4 <GPIO_Config+0x144>)
 800126e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001272:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE11_1;        /* Alternate function */
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <GPIO_Config+0x144>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <GPIO_Config+0x144>)
 800127a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800127e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD11);
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <GPIO_Config+0x144>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4a0f      	ldr	r2, [pc, #60]	@ (80012c4 <GPIO_Config+0x144>)
 8001286:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800128a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;        /* Pull-up */
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <GPIO_Config+0x144>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <GPIO_Config+0x144>)
 8001292:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001296:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL11);
 8001298:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <GPIO_Config+0x144>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129c:	4a09      	ldr	r2, [pc, #36]	@ (80012c4 <GPIO_Config+0x144>)
 800129e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80012a2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (GPIO_AF7_USART3 << GPIO_AFRH_AFSEL11_Pos);
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <GPIO_Config+0x144>)
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <GPIO_Config+0x144>)
 80012aa:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80012ae:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400

080012c8 <NVIC_Config>:
 * @brief  Configure NVIC priorities
 * @param  None
 * @retval None
 */
void NVIC_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    /* Set priority group to 4 bits for preemption priority */
    NVIC_SetPriorityGrouping(0x03);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff fe67 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
    
    /* Configure CAN1 RX0 interrupt priority */
    NVIC_SetPriority(CAN1_RX0_IRQn, NVIC_EncodePriority(0x03, 1, 0));
 80012d2:	2200      	movs	r2, #0
 80012d4:	2101      	movs	r1, #1
 80012d6:	2003      	movs	r0, #3
 80012d8:	f7ff fece 	bl	8001078 <NVIC_EncodePriority>
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	2014      	movs	r0, #20
 80012e2:	f7ff fe9f 	bl	8001024 <__NVIC_SetPriority>
    NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012e6:	2014      	movs	r0, #20
 80012e8:	f7ff fe7e 	bl	8000fe8 <__NVIC_EnableIRQ>
    
    /* Configure USART3 interrupt priority */
    NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(0x03, 2, 0));
 80012ec:	2200      	movs	r2, #0
 80012ee:	2102      	movs	r1, #2
 80012f0:	2003      	movs	r0, #3
 80012f2:	f7ff fec1 	bl	8001078 <NVIC_EncodePriority>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4619      	mov	r1, r3
 80012fa:	2027      	movs	r0, #39	@ 0x27
 80012fc:	f7ff fe92 	bl	8001024 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART3_IRQn);
 8001300:	2027      	movs	r0, #39	@ 0x27
 8001302:	f7ff fe71 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <UART_Init>:
 * @brief  Initialize UART peripheral
 * @param  baudrate: UART baudrate (e.g., 115200)
 * @retval true if successful, false otherwise
 */
bool UART_Init(uint32_t baudrate)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    /* Enable USART3 clock */
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8001338:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <UART_Init+0xcc>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	4a2f      	ldr	r2, [pc, #188]	@ (80013fc <UART_Init+0xcc>)
 800133e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001342:	6413      	str	r3, [r2, #64]	@ 0x40
    
    /* Reset USART3 to ensure clean state */
    RCC->APB1RSTR |= RCC_APB1RSTR_USART3RST;
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <UART_Init+0xcc>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a2c      	ldr	r2, [pc, #176]	@ (80013fc <UART_Init+0xcc>)
 800134a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800134e:	6213      	str	r3, [r2, #32]
    RCC->APB1RSTR &= ~RCC_APB1RSTR_USART3RST;
 8001350:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <UART_Init+0xcc>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a29      	ldr	r2, [pc, #164]	@ (80013fc <UART_Init+0xcc>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135a:	6213      	str	r3, [r2, #32]
    
    /* Small delay after reset */
    for(volatile int i = 0; i < 1000; i++);
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e002      	b.n	8001368 <UART_Init+0x38>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3301      	adds	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800136e:	dbf8      	blt.n	8001362 <UART_Init+0x32>
    
    /* Calculate baudrate register value with fractional part */
    /* BRR format: [15:4] = Mantissa, [3:0] = Fraction */
    /* BRR = APB1_FREQ / (16 * baudrate) - USART3 is on APB1! */
    
    uint32_t usartdiv = (APB1_CLOCK_FREQ * 25) / (4 * baudrate);  /* Multiply by 25 for precision */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4a22      	ldr	r2, [pc, #136]	@ (8001400 <UART_Init+0xd0>)
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
    uint32_t mantissa = usartdiv / 100;                            /* Integer part */
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	4a21      	ldr	r2, [pc, #132]	@ (8001404 <UART_Init+0xd4>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	61fb      	str	r3, [r7, #28]
    uint32_t fraction = ((usartdiv - (mantissa * 100)) * 16 + 50) / 100; /* Fractional part */
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2264      	movs	r2, #100	@ 0x64
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	3332      	adds	r3, #50	@ 0x32
 8001398:	4a1a      	ldr	r2, [pc, #104]	@ (8001404 <UART_Init+0xd4>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	61bb      	str	r3, [r7, #24]
    
    /* Handle fraction overflow */
    if (fraction >= 16) {
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d904      	bls.n	80013b2 <UART_Init+0x82>
        mantissa++;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	3301      	adds	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
        fraction = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
    }
    
    uint32_t brr = (mantissa << 4) | (fraction & 0x0F);
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	011a      	lsls	r2, r3, #4
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
     * mantissa = 2278 / 100 = 22
     * fraction = ((2278 - 2200) * 16 + 50) / 100 = (78 * 16 + 50) / 100 = 1298 / 100 = 12
     * BRR = (22 << 4) | 12 = 0x160 | 0xC = 0x16C
     */
    
    USART3->BRR = brr;
 80013c0:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <UART_Init+0xd8>)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	6093      	str	r3, [r2, #8]
    
    /* Configure UART parameters */
    USART3->CR1 = USART_CR1_UE |        /* USART enable */
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <UART_Init+0xd8>)
 80013c8:	f242 022c 	movw	r2, #8236	@ 0x202c
 80013cc:	60da      	str	r2, [r3, #12]
                  USART_CR1_TE |        /* Transmitter enable */
                  USART_CR1_RE |        /* Receiver enable */
                  USART_CR1_RXNEIE;     /* RX not empty interrupt */
    
    USART3->CR2 = 0;                    /* 1 stop bit, no clock output */
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <UART_Init+0xd8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
    USART3->CR3 = 0;                    /* No hardware flow control */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <UART_Init+0xd8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
    
    /* Wait for UART to be ready */
    while (!(USART3->SR & USART_SR_TC));
 80013da:	bf00      	nop
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <UART_Init+0xd8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f9      	beq.n	80013dc <UART_Init+0xac>
    
    /* Clear status register */
    USART3->SR = 0;
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <UART_Init+0xd8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
    
    /* Clear error flags */
    UART_ClearError();
 80013ee:	f000 f88f 	bl	8001510 <UART_ClearError>
    
    return true;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	3e95ba80 	.word	0x3e95ba80
 8001404:	51eb851f 	.word	0x51eb851f
 8001408:	40004800 	.word	0x40004800

0800140c <UART_Write>:
 * @brief  Write string to UART (non-blocking)
 * @param  str: Null-terminated string to send
 * @retval true if successful, false if buffer full
 */
bool UART_Write(const char* str)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    if (str == NULL) return false;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <UART_Write+0x12>
 800141a:	2300      	movs	r3, #0
 800141c:	e00a      	b.n	8001434 <UART_Write+0x28>
    
    uint16_t length = strlen(str);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7fe fed6 	bl	80001d0 <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	81fb      	strh	r3, [r7, #14]
    return UART_WriteData((const uint8_t*)str, length);
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	4619      	mov	r1, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f805 	bl	800143c <UART_WriteData>
 8001432:	4603      	mov	r3, r0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <UART_WriteData>:
 * @param  data: Pointer to data buffer
 * @param  length: Number of bytes to send
 * @retval true if successful, false if buffer full
 */
bool UART_WriteData(const uint8_t* data, uint16_t length)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
    if (data == NULL || length == 0) return false;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <UART_WriteData+0x18>
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <UART_WriteData+0x1c>
 8001454:	2300      	movs	r3, #0
 8001456:	e041      	b.n	80014dc <UART_WriteData+0xa0>
    
    /* Check if enough space in buffer */
    if ((UART_TX_BUFFER_SIZE - tx_count) < length) {
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <UART_WriteData+0xa8>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	429a      	cmp	r2, r3
 8001466:	da04      	bge.n	8001472 <UART_WriteData+0x36>
        last_error = UART_ERROR_BUFFER_FULL;
 8001468:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <UART_WriteData+0xac>)
 800146a:	2204      	movs	r2, #4
 800146c:	701a      	strb	r2, [r3, #0]
        return false;
 800146e:	2300      	movs	r3, #0
 8001470:	e034      	b.n	80014dc <UART_WriteData+0xa0>
  __ASM volatile ("cpsid i" : : : "memory");
 8001472:	b672      	cpsid	i
}
 8001474:	bf00      	nop
    
    /* Disable interrupts for atomic operation */
    __disable_irq();
    
    /* Copy data to buffer */
    for (uint16_t i = 0; i < length; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	e01e      	b.n	80014ba <UART_WriteData+0x7e>
        tx_buffer[tx_head] = data[i];
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a1a      	ldr	r2, [pc, #104]	@ (80014ec <UART_WriteData+0xb0>)
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	b292      	uxth	r2, r2
 8001488:	7819      	ldrb	r1, [r3, #0]
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <UART_WriteData+0xb4>)
 800148c:	5499      	strb	r1, [r3, r2]
        tx_head = (tx_head + 1) % UART_TX_BUFFER_SIZE;
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <UART_WriteData+0xb0>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	3301      	adds	r3, #1
 8001496:	425a      	negs	r2, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	bf58      	it	pl
 800149e:	4253      	negpl	r3, r2
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <UART_WriteData+0xb0>)
 80014a4:	801a      	strh	r2, [r3, #0]
        tx_count++;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <UART_WriteData+0xa8>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	3301      	adds	r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <UART_WriteData+0xa8>)
 80014b2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	3301      	adds	r3, #1
 80014b8:	81fb      	strh	r3, [r7, #14]
 80014ba:	89fa      	ldrh	r2, [r7, #14]
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3dc      	bcc.n	800147c <UART_WriteData+0x40>
    }
    
    /* Start transmission if not already in progress */
    if (!tx_in_progress) {
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <UART_WriteData+0xb8>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f083 0301 	eor.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <UART_WriteData+0x9a>
        UART_StartTransmission();
 80014d2:	f000 f8d9 	bl	8001688 <UART_StartTransmission>
  __ASM volatile ("cpsie i" : : : "memory");
 80014d6:	b662      	cpsie	i
}
 80014d8:	bf00      	nop
    }
    
    __enable_irq();
    
    return true;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200002f0 	.word	0x200002f0
 80014e8:	20000378 	.word	0x20000378
 80014ec:	200002ec 	.word	0x200002ec
 80014f0:	200001ec 	.word	0x200001ec
 80014f4:	20000379 	.word	0x20000379

080014f8 <UART_GetLastError>:
/**
 * @brief  Get last UART error
 * @retval Last error code
 */
UartError_t UART_GetLastError(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
    return last_error;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <UART_GetLastError+0x14>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000378 	.word	0x20000378

08001510 <UART_ClearError>:

/**
 * @brief  Clear UART error flags
 */
void UART_ClearError(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
    last_error = UART_ERROR_NONE;
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <UART_ClearError+0x1c>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
    /* Clear UART status register */
    (void)USART3->SR;
 800151a:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <UART_ClearError+0x20>)
 800151c:	681b      	ldr	r3, [r3, #0]
    (void)USART3->DR;
 800151e:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <UART_ClearError+0x20>)
 8001520:	685b      	ldr	r3, [r3, #4]
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	20000378 	.word	0x20000378
 8001530:	40004800 	.word	0x40004800

08001534 <UART_IRQHandler>:

/**
 * @brief  UART interrupt handler
 */
void UART_IRQHandler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
    uint32_t sr = USART3->SR;
 800153a:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <UART_IRQHandler+0x130>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	607b      	str	r3, [r7, #4]
    
    /* Receive data register not empty */
    if (sr & USART_SR_RXNE) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	2b00      	cmp	r3, #0
 8001548:	d027      	beq.n	800159a <UART_IRQHandler+0x66>
        uint8_t data = USART3->DR;
 800154a:	4b46      	ldr	r3, [pc, #280]	@ (8001664 <UART_IRQHandler+0x130>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	70fb      	strb	r3, [r7, #3]
        
        /* Check for buffer overflow */
        if (rx_count < UART_RX_BUFFER_SIZE) {
 8001550:	4b45      	ldr	r3, [pc, #276]	@ (8001668 <UART_IRQHandler+0x134>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	2b7f      	cmp	r3, #127	@ 0x7f
 8001558:	d81c      	bhi.n	8001594 <UART_IRQHandler+0x60>
            rx_buffer[rx_head] = data;
 800155a:	4b44      	ldr	r3, [pc, #272]	@ (800166c <UART_IRQHandler+0x138>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4619      	mov	r1, r3
 8001562:	4a43      	ldr	r2, [pc, #268]	@ (8001670 <UART_IRQHandler+0x13c>)
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	5453      	strb	r3, [r2, r1]
            rx_head = (rx_head + 1) % UART_RX_BUFFER_SIZE;
 8001568:	4b40      	ldr	r3, [pc, #256]	@ (800166c <UART_IRQHandler+0x138>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	425a      	negs	r2, r3
 8001572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001576:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800157a:	bf58      	it	pl
 800157c:	4253      	negpl	r3, r2
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b3a      	ldr	r3, [pc, #232]	@ (800166c <UART_IRQHandler+0x138>)
 8001582:	801a      	strh	r2, [r3, #0]
            rx_count++;
 8001584:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <UART_IRQHandler+0x134>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b36      	ldr	r3, [pc, #216]	@ (8001668 <UART_IRQHandler+0x134>)
 8001590:	801a      	strh	r2, [r3, #0]
 8001592:	e002      	b.n	800159a <UART_IRQHandler+0x66>
        } else {
            last_error = UART_ERROR_OVERRUN;
 8001594:	4b37      	ldr	r3, [pc, #220]	@ (8001674 <UART_IRQHandler+0x140>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
        }
    }
    
    /* Transmit data register empty */
    if ((sr & USART_SR_TXE) && (USART3->CR1 & USART_CR1_TXEIE)) {
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d02f      	beq.n	8001604 <UART_IRQHandler+0xd0>
 80015a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001664 <UART_IRQHandler+0x130>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d029      	beq.n	8001604 <UART_IRQHandler+0xd0>
        if (tx_count > 0) {
 80015b0:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <UART_IRQHandler+0x144>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01b      	beq.n	80015f2 <UART_IRQHandler+0xbe>
            /* Send next byte */
            USART3->DR = tx_buffer[tx_tail];
 80015ba:	4b30      	ldr	r3, [pc, #192]	@ (800167c <UART_IRQHandler+0x148>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <UART_IRQHandler+0x14c>)
 80015c4:	5c9a      	ldrb	r2, [r3, r2]
 80015c6:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <UART_IRQHandler+0x130>)
 80015c8:	605a      	str	r2, [r3, #4]
            tx_tail = (tx_tail + 1) % UART_TX_BUFFER_SIZE;
 80015ca:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <UART_IRQHandler+0x148>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	425a      	negs	r2, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	bf58      	it	pl
 80015da:	4253      	negpl	r3, r2
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b27      	ldr	r3, [pc, #156]	@ (800167c <UART_IRQHandler+0x148>)
 80015e0:	801a      	strh	r2, [r3, #0]
            tx_count--;
 80015e2:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <UART_IRQHandler+0x144>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <UART_IRQHandler+0x144>)
 80015ee:	801a      	strh	r2, [r3, #0]
 80015f0:	e008      	b.n	8001604 <UART_IRQHandler+0xd0>
        } else {
            /* No more data to send, disable TXE interrupt */
            USART3->CR1 &= ~USART_CR1_TXEIE;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <UART_IRQHandler+0x130>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001664 <UART_IRQHandler+0x130>)
 80015f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015fc:	60d3      	str	r3, [r2, #12]
            tx_in_progress = false;
 80015fe:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <UART_IRQHandler+0x150>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
        }
    }
    
    /* Transmission complete */
    if (sr & USART_SR_TC) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <UART_IRQHandler+0xe6>
        USART3->SR &= ~USART_SR_TC; /* Clear TC flag */
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <UART_IRQHandler+0x130>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <UART_IRQHandler+0x130>)
 8001614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001618:	6013      	str	r3, [r2, #0]
    }
    
    /* Error handling */
    if (sr & USART_SR_ORE) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <UART_IRQHandler+0xfa>
        last_error = UART_ERROR_OVERRUN;
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <UART_IRQHandler+0x140>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
        (void)USART3->DR; /* Clear ORE flag */
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <UART_IRQHandler+0x130>)
 800162c:	685b      	ldr	r3, [r3, #4]
    }
    
    if (sr & USART_SR_FE) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <UART_IRQHandler+0x10e>
        last_error = UART_ERROR_FRAMING;
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <UART_IRQHandler+0x140>)
 800163a:	2202      	movs	r2, #2
 800163c:	701a      	strb	r2, [r3, #0]
        (void)USART3->DR; /* Clear FE flag */
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <UART_IRQHandler+0x130>)
 8001640:	685b      	ldr	r3, [r3, #4]
    }
    
    if (sr & USART_SR_PE) {
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <UART_IRQHandler+0x122>
        last_error = UART_ERROR_PARITY;
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <UART_IRQHandler+0x140>)
 800164e:	2203      	movs	r2, #3
 8001650:	701a      	strb	r2, [r3, #0]
        (void)USART3->DR; /* Clear PE flag */
 8001652:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <UART_IRQHandler+0x130>)
 8001654:	685b      	ldr	r3, [r3, #4]
    }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40004800 	.word	0x40004800
 8001668:	20000376 	.word	0x20000376
 800166c:	20000374 	.word	0x20000374
 8001670:	200002f4 	.word	0x200002f4
 8001674:	20000378 	.word	0x20000378
 8001678:	200002f0 	.word	0x200002f0
 800167c:	200002ee 	.word	0x200002ee
 8001680:	200001ec 	.word	0x200001ec
 8001684:	20000379 	.word	0x20000379

08001688 <UART_StartTransmission>:

/**
 * @brief  Start UART transmission
 */
static void UART_StartTransmission(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
    if (tx_count > 0 && !tx_in_progress) {
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <UART_StartTransmission+0x70>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d02b      	beq.n	80016ee <UART_StartTransmission+0x66>
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <UART_StartTransmission+0x74>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f083 0301 	eor.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d023      	beq.n	80016ee <UART_StartTransmission+0x66>
        tx_in_progress = true;
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <UART_StartTransmission+0x74>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
        
        /* Send first byte */
        USART3->DR = tx_buffer[tx_tail];
 80016ac:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <UART_StartTransmission+0x78>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <UART_StartTransmission+0x7c>)
 80016b6:	5c9a      	ldrb	r2, [r3, r2]
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <UART_StartTransmission+0x80>)
 80016ba:	605a      	str	r2, [r3, #4]
        tx_tail = (tx_tail + 1) % UART_TX_BUFFER_SIZE;
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <UART_StartTransmission+0x78>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	425a      	negs	r2, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	bf58      	it	pl
 80016cc:	4253      	negpl	r3, r2
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <UART_StartTransmission+0x78>)
 80016d2:	801a      	strh	r2, [r3, #0]
        tx_count--;
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <UART_StartTransmission+0x70>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <UART_StartTransmission+0x70>)
 80016e0:	801a      	strh	r2, [r3, #0]
        
        /* Enable TXE interrupt */
        USART3->CR1 |= USART_CR1_TXEIE;
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <UART_StartTransmission+0x80>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <UART_StartTransmission+0x80>)
 80016e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ec:	60d3      	str	r3, [r2, #12]
    }
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	200002f0 	.word	0x200002f0
 80016fc:	20000379 	.word	0x20000379
 8001700:	200002ee 	.word	0x200002ee
 8001704:	200001ec 	.word	0x200001ec
 8001708:	40004800 	.word	0x40004800

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001744 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001710:	f7ff fdfc 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	@ (8001748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	@ (800174c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	@ (8001750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	@ (8001758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f000 f85f 	bl	80017fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7fe fedb 	bl	80004f8 <main>
  bx  lr    
 8001742:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001750:	08002384 	.word	0x08002384
  ldr r2, =_sbss
 8001754:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001758:	200004c8 	.word	0x200004c8

0800175c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC_IRQHandler>
	...

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000000c 	.word	0x2000000c
 8001784:	2000037c 	.word	0x2000037c

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000037c 	.word	0x2000037c

080017a0 <siprintf>:
 80017a0:	b40e      	push	{r1, r2, r3}
 80017a2:	b500      	push	{lr}
 80017a4:	b09c      	sub	sp, #112	@ 0x70
 80017a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80017a8:	9002      	str	r0, [sp, #8]
 80017aa:	9006      	str	r0, [sp, #24]
 80017ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80017b0:	4809      	ldr	r0, [pc, #36]	@ (80017d8 <siprintf+0x38>)
 80017b2:	9107      	str	r1, [sp, #28]
 80017b4:	9104      	str	r1, [sp, #16]
 80017b6:	4909      	ldr	r1, [pc, #36]	@ (80017dc <siprintf+0x3c>)
 80017b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80017bc:	9105      	str	r1, [sp, #20]
 80017be:	6800      	ldr	r0, [r0, #0]
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	a902      	add	r1, sp, #8
 80017c4:	f000 f994 	bl	8001af0 <_svfiprintf_r>
 80017c8:	9b02      	ldr	r3, [sp, #8]
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	b01c      	add	sp, #112	@ 0x70
 80017d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80017d4:	b003      	add	sp, #12
 80017d6:	4770      	bx	lr
 80017d8:	20000010 	.word	0x20000010
 80017dc:	ffff0208 	.word	0xffff0208

080017e0 <memset>:
 80017e0:	4402      	add	r2, r0
 80017e2:	4603      	mov	r3, r0
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d100      	bne.n	80017ea <memset+0xa>
 80017e8:	4770      	bx	lr
 80017ea:	f803 1b01 	strb.w	r1, [r3], #1
 80017ee:	e7f9      	b.n	80017e4 <memset+0x4>

080017f0 <__errno>:
 80017f0:	4b01      	ldr	r3, [pc, #4]	@ (80017f8 <__errno+0x8>)
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000010 	.word	0x20000010

080017fc <__libc_init_array>:
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	4d0d      	ldr	r5, [pc, #52]	@ (8001834 <__libc_init_array+0x38>)
 8001800:	4c0d      	ldr	r4, [pc, #52]	@ (8001838 <__libc_init_array+0x3c>)
 8001802:	1b64      	subs	r4, r4, r5
 8001804:	10a4      	asrs	r4, r4, #2
 8001806:	2600      	movs	r6, #0
 8001808:	42a6      	cmp	r6, r4
 800180a:	d109      	bne.n	8001820 <__libc_init_array+0x24>
 800180c:	4d0b      	ldr	r5, [pc, #44]	@ (800183c <__libc_init_array+0x40>)
 800180e:	4c0c      	ldr	r4, [pc, #48]	@ (8001840 <__libc_init_array+0x44>)
 8001810:	f000 fc66 	bl	80020e0 <_init>
 8001814:	1b64      	subs	r4, r4, r5
 8001816:	10a4      	asrs	r4, r4, #2
 8001818:	2600      	movs	r6, #0
 800181a:	42a6      	cmp	r6, r4
 800181c:	d105      	bne.n	800182a <__libc_init_array+0x2e>
 800181e:	bd70      	pop	{r4, r5, r6, pc}
 8001820:	f855 3b04 	ldr.w	r3, [r5], #4
 8001824:	4798      	blx	r3
 8001826:	3601      	adds	r6, #1
 8001828:	e7ee      	b.n	8001808 <__libc_init_array+0xc>
 800182a:	f855 3b04 	ldr.w	r3, [r5], #4
 800182e:	4798      	blx	r3
 8001830:	3601      	adds	r6, #1
 8001832:	e7f2      	b.n	800181a <__libc_init_array+0x1e>
 8001834:	0800237c 	.word	0x0800237c
 8001838:	0800237c 	.word	0x0800237c
 800183c:	0800237c 	.word	0x0800237c
 8001840:	08002380 	.word	0x08002380

08001844 <__retarget_lock_acquire_recursive>:
 8001844:	4770      	bx	lr

08001846 <__retarget_lock_release_recursive>:
 8001846:	4770      	bx	lr

08001848 <_free_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4605      	mov	r5, r0
 800184c:	2900      	cmp	r1, #0
 800184e:	d041      	beq.n	80018d4 <_free_r+0x8c>
 8001850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001854:	1f0c      	subs	r4, r1, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	bfb8      	it	lt
 800185a:	18e4      	addlt	r4, r4, r3
 800185c:	f000 f8e0 	bl	8001a20 <__malloc_lock>
 8001860:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <_free_r+0x90>)
 8001862:	6813      	ldr	r3, [r2, #0]
 8001864:	b933      	cbnz	r3, 8001874 <_free_r+0x2c>
 8001866:	6063      	str	r3, [r4, #4]
 8001868:	6014      	str	r4, [r2, #0]
 800186a:	4628      	mov	r0, r5
 800186c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001870:	f000 b8dc 	b.w	8001a2c <__malloc_unlock>
 8001874:	42a3      	cmp	r3, r4
 8001876:	d908      	bls.n	800188a <_free_r+0x42>
 8001878:	6820      	ldr	r0, [r4, #0]
 800187a:	1821      	adds	r1, r4, r0
 800187c:	428b      	cmp	r3, r1
 800187e:	bf01      	itttt	eq
 8001880:	6819      	ldreq	r1, [r3, #0]
 8001882:	685b      	ldreq	r3, [r3, #4]
 8001884:	1809      	addeq	r1, r1, r0
 8001886:	6021      	streq	r1, [r4, #0]
 8001888:	e7ed      	b.n	8001866 <_free_r+0x1e>
 800188a:	461a      	mov	r2, r3
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	b10b      	cbz	r3, 8001894 <_free_r+0x4c>
 8001890:	42a3      	cmp	r3, r4
 8001892:	d9fa      	bls.n	800188a <_free_r+0x42>
 8001894:	6811      	ldr	r1, [r2, #0]
 8001896:	1850      	adds	r0, r2, r1
 8001898:	42a0      	cmp	r0, r4
 800189a:	d10b      	bne.n	80018b4 <_free_r+0x6c>
 800189c:	6820      	ldr	r0, [r4, #0]
 800189e:	4401      	add	r1, r0
 80018a0:	1850      	adds	r0, r2, r1
 80018a2:	4283      	cmp	r3, r0
 80018a4:	6011      	str	r1, [r2, #0]
 80018a6:	d1e0      	bne.n	800186a <_free_r+0x22>
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	6053      	str	r3, [r2, #4]
 80018ae:	4408      	add	r0, r1
 80018b0:	6010      	str	r0, [r2, #0]
 80018b2:	e7da      	b.n	800186a <_free_r+0x22>
 80018b4:	d902      	bls.n	80018bc <_free_r+0x74>
 80018b6:	230c      	movs	r3, #12
 80018b8:	602b      	str	r3, [r5, #0]
 80018ba:	e7d6      	b.n	800186a <_free_r+0x22>
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	1821      	adds	r1, r4, r0
 80018c0:	428b      	cmp	r3, r1
 80018c2:	bf04      	itt	eq
 80018c4:	6819      	ldreq	r1, [r3, #0]
 80018c6:	685b      	ldreq	r3, [r3, #4]
 80018c8:	6063      	str	r3, [r4, #4]
 80018ca:	bf04      	itt	eq
 80018cc:	1809      	addeq	r1, r1, r0
 80018ce:	6021      	streq	r1, [r4, #0]
 80018d0:	6054      	str	r4, [r2, #4]
 80018d2:	e7ca      	b.n	800186a <_free_r+0x22>
 80018d4:	bd38      	pop	{r3, r4, r5, pc}
 80018d6:	bf00      	nop
 80018d8:	200004c4 	.word	0x200004c4

080018dc <sbrk_aligned>:
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	4e0f      	ldr	r6, [pc, #60]	@ (800191c <sbrk_aligned+0x40>)
 80018e0:	460c      	mov	r4, r1
 80018e2:	6831      	ldr	r1, [r6, #0]
 80018e4:	4605      	mov	r5, r0
 80018e6:	b911      	cbnz	r1, 80018ee <sbrk_aligned+0x12>
 80018e8:	f000 fba6 	bl	8002038 <_sbrk_r>
 80018ec:	6030      	str	r0, [r6, #0]
 80018ee:	4621      	mov	r1, r4
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 fba1 	bl	8002038 <_sbrk_r>
 80018f6:	1c43      	adds	r3, r0, #1
 80018f8:	d103      	bne.n	8001902 <sbrk_aligned+0x26>
 80018fa:	f04f 34ff 	mov.w	r4, #4294967295
 80018fe:	4620      	mov	r0, r4
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	1cc4      	adds	r4, r0, #3
 8001904:	f024 0403 	bic.w	r4, r4, #3
 8001908:	42a0      	cmp	r0, r4
 800190a:	d0f8      	beq.n	80018fe <sbrk_aligned+0x22>
 800190c:	1a21      	subs	r1, r4, r0
 800190e:	4628      	mov	r0, r5
 8001910:	f000 fb92 	bl	8002038 <_sbrk_r>
 8001914:	3001      	adds	r0, #1
 8001916:	d1f2      	bne.n	80018fe <sbrk_aligned+0x22>
 8001918:	e7ef      	b.n	80018fa <sbrk_aligned+0x1e>
 800191a:	bf00      	nop
 800191c:	200004c0 	.word	0x200004c0

08001920 <_malloc_r>:
 8001920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001924:	1ccd      	adds	r5, r1, #3
 8001926:	f025 0503 	bic.w	r5, r5, #3
 800192a:	3508      	adds	r5, #8
 800192c:	2d0c      	cmp	r5, #12
 800192e:	bf38      	it	cc
 8001930:	250c      	movcc	r5, #12
 8001932:	2d00      	cmp	r5, #0
 8001934:	4606      	mov	r6, r0
 8001936:	db01      	blt.n	800193c <_malloc_r+0x1c>
 8001938:	42a9      	cmp	r1, r5
 800193a:	d904      	bls.n	8001946 <_malloc_r+0x26>
 800193c:	230c      	movs	r3, #12
 800193e:	6033      	str	r3, [r6, #0]
 8001940:	2000      	movs	r0, #0
 8001942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001a1c <_malloc_r+0xfc>
 800194a:	f000 f869 	bl	8001a20 <__malloc_lock>
 800194e:	f8d8 3000 	ldr.w	r3, [r8]
 8001952:	461c      	mov	r4, r3
 8001954:	bb44      	cbnz	r4, 80019a8 <_malloc_r+0x88>
 8001956:	4629      	mov	r1, r5
 8001958:	4630      	mov	r0, r6
 800195a:	f7ff ffbf 	bl	80018dc <sbrk_aligned>
 800195e:	1c43      	adds	r3, r0, #1
 8001960:	4604      	mov	r4, r0
 8001962:	d158      	bne.n	8001a16 <_malloc_r+0xf6>
 8001964:	f8d8 4000 	ldr.w	r4, [r8]
 8001968:	4627      	mov	r7, r4
 800196a:	2f00      	cmp	r7, #0
 800196c:	d143      	bne.n	80019f6 <_malloc_r+0xd6>
 800196e:	2c00      	cmp	r4, #0
 8001970:	d04b      	beq.n	8001a0a <_malloc_r+0xea>
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	4639      	mov	r1, r7
 8001976:	4630      	mov	r0, r6
 8001978:	eb04 0903 	add.w	r9, r4, r3
 800197c:	f000 fb5c 	bl	8002038 <_sbrk_r>
 8001980:	4581      	cmp	r9, r0
 8001982:	d142      	bne.n	8001a0a <_malloc_r+0xea>
 8001984:	6821      	ldr	r1, [r4, #0]
 8001986:	1a6d      	subs	r5, r5, r1
 8001988:	4629      	mov	r1, r5
 800198a:	4630      	mov	r0, r6
 800198c:	f7ff ffa6 	bl	80018dc <sbrk_aligned>
 8001990:	3001      	adds	r0, #1
 8001992:	d03a      	beq.n	8001a0a <_malloc_r+0xea>
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	442b      	add	r3, r5
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	f8d8 3000 	ldr.w	r3, [r8]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	bb62      	cbnz	r2, 80019fc <_malloc_r+0xdc>
 80019a2:	f8c8 7000 	str.w	r7, [r8]
 80019a6:	e00f      	b.n	80019c8 <_malloc_r+0xa8>
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	1b52      	subs	r2, r2, r5
 80019ac:	d420      	bmi.n	80019f0 <_malloc_r+0xd0>
 80019ae:	2a0b      	cmp	r2, #11
 80019b0:	d917      	bls.n	80019e2 <_malloc_r+0xc2>
 80019b2:	1961      	adds	r1, r4, r5
 80019b4:	42a3      	cmp	r3, r4
 80019b6:	6025      	str	r5, [r4, #0]
 80019b8:	bf18      	it	ne
 80019ba:	6059      	strne	r1, [r3, #4]
 80019bc:	6863      	ldr	r3, [r4, #4]
 80019be:	bf08      	it	eq
 80019c0:	f8c8 1000 	streq.w	r1, [r8]
 80019c4:	5162      	str	r2, [r4, r5]
 80019c6:	604b      	str	r3, [r1, #4]
 80019c8:	4630      	mov	r0, r6
 80019ca:	f000 f82f 	bl	8001a2c <__malloc_unlock>
 80019ce:	f104 000b 	add.w	r0, r4, #11
 80019d2:	1d23      	adds	r3, r4, #4
 80019d4:	f020 0007 	bic.w	r0, r0, #7
 80019d8:	1ac2      	subs	r2, r0, r3
 80019da:	bf1c      	itt	ne
 80019dc:	1a1b      	subne	r3, r3, r0
 80019de:	50a3      	strne	r3, [r4, r2]
 80019e0:	e7af      	b.n	8001942 <_malloc_r+0x22>
 80019e2:	6862      	ldr	r2, [r4, #4]
 80019e4:	42a3      	cmp	r3, r4
 80019e6:	bf0c      	ite	eq
 80019e8:	f8c8 2000 	streq.w	r2, [r8]
 80019ec:	605a      	strne	r2, [r3, #4]
 80019ee:	e7eb      	b.n	80019c8 <_malloc_r+0xa8>
 80019f0:	4623      	mov	r3, r4
 80019f2:	6864      	ldr	r4, [r4, #4]
 80019f4:	e7ae      	b.n	8001954 <_malloc_r+0x34>
 80019f6:	463c      	mov	r4, r7
 80019f8:	687f      	ldr	r7, [r7, #4]
 80019fa:	e7b6      	b.n	800196a <_malloc_r+0x4a>
 80019fc:	461a      	mov	r2, r3
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	42a3      	cmp	r3, r4
 8001a02:	d1fb      	bne.n	80019fc <_malloc_r+0xdc>
 8001a04:	2300      	movs	r3, #0
 8001a06:	6053      	str	r3, [r2, #4]
 8001a08:	e7de      	b.n	80019c8 <_malloc_r+0xa8>
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	6033      	str	r3, [r6, #0]
 8001a0e:	4630      	mov	r0, r6
 8001a10:	f000 f80c 	bl	8001a2c <__malloc_unlock>
 8001a14:	e794      	b.n	8001940 <_malloc_r+0x20>
 8001a16:	6005      	str	r5, [r0, #0]
 8001a18:	e7d6      	b.n	80019c8 <_malloc_r+0xa8>
 8001a1a:	bf00      	nop
 8001a1c:	200004c4 	.word	0x200004c4

08001a20 <__malloc_lock>:
 8001a20:	4801      	ldr	r0, [pc, #4]	@ (8001a28 <__malloc_lock+0x8>)
 8001a22:	f7ff bf0f 	b.w	8001844 <__retarget_lock_acquire_recursive>
 8001a26:	bf00      	nop
 8001a28:	200004bc 	.word	0x200004bc

08001a2c <__malloc_unlock>:
 8001a2c:	4801      	ldr	r0, [pc, #4]	@ (8001a34 <__malloc_unlock+0x8>)
 8001a2e:	f7ff bf0a 	b.w	8001846 <__retarget_lock_release_recursive>
 8001a32:	bf00      	nop
 8001a34:	200004bc 	.word	0x200004bc

08001a38 <__ssputs_r>:
 8001a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a3c:	688e      	ldr	r6, [r1, #8]
 8001a3e:	461f      	mov	r7, r3
 8001a40:	42be      	cmp	r6, r7
 8001a42:	680b      	ldr	r3, [r1, #0]
 8001a44:	4682      	mov	sl, r0
 8001a46:	460c      	mov	r4, r1
 8001a48:	4690      	mov	r8, r2
 8001a4a:	d82d      	bhi.n	8001aa8 <__ssputs_r+0x70>
 8001a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001a50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001a54:	d026      	beq.n	8001aa4 <__ssputs_r+0x6c>
 8001a56:	6965      	ldr	r5, [r4, #20]
 8001a58:	6909      	ldr	r1, [r1, #16]
 8001a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a5e:	eba3 0901 	sub.w	r9, r3, r1
 8001a62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a66:	1c7b      	adds	r3, r7, #1
 8001a68:	444b      	add	r3, r9
 8001a6a:	106d      	asrs	r5, r5, #1
 8001a6c:	429d      	cmp	r5, r3
 8001a6e:	bf38      	it	cc
 8001a70:	461d      	movcc	r5, r3
 8001a72:	0553      	lsls	r3, r2, #21
 8001a74:	d527      	bpl.n	8001ac6 <__ssputs_r+0x8e>
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7ff ff52 	bl	8001920 <_malloc_r>
 8001a7c:	4606      	mov	r6, r0
 8001a7e:	b360      	cbz	r0, 8001ada <__ssputs_r+0xa2>
 8001a80:	6921      	ldr	r1, [r4, #16]
 8001a82:	464a      	mov	r2, r9
 8001a84:	f000 fae8 	bl	8002058 <memcpy>
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a92:	81a3      	strh	r3, [r4, #12]
 8001a94:	6126      	str	r6, [r4, #16]
 8001a96:	6165      	str	r5, [r4, #20]
 8001a98:	444e      	add	r6, r9
 8001a9a:	eba5 0509 	sub.w	r5, r5, r9
 8001a9e:	6026      	str	r6, [r4, #0]
 8001aa0:	60a5      	str	r5, [r4, #8]
 8001aa2:	463e      	mov	r6, r7
 8001aa4:	42be      	cmp	r6, r7
 8001aa6:	d900      	bls.n	8001aaa <__ssputs_r+0x72>
 8001aa8:	463e      	mov	r6, r7
 8001aaa:	6820      	ldr	r0, [r4, #0]
 8001aac:	4632      	mov	r2, r6
 8001aae:	4641      	mov	r1, r8
 8001ab0:	f000 faa8 	bl	8002004 <memmove>
 8001ab4:	68a3      	ldr	r3, [r4, #8]
 8001ab6:	1b9b      	subs	r3, r3, r6
 8001ab8:	60a3      	str	r3, [r4, #8]
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	4433      	add	r3, r6
 8001abe:	6023      	str	r3, [r4, #0]
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ac6:	462a      	mov	r2, r5
 8001ac8:	f000 fad4 	bl	8002074 <_realloc_r>
 8001acc:	4606      	mov	r6, r0
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d1e0      	bne.n	8001a94 <__ssputs_r+0x5c>
 8001ad2:	6921      	ldr	r1, [r4, #16]
 8001ad4:	4650      	mov	r0, sl
 8001ad6:	f7ff feb7 	bl	8001848 <_free_r>
 8001ada:	230c      	movs	r3, #12
 8001adc:	f8ca 3000 	str.w	r3, [sl]
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ae6:	81a3      	strh	r3, [r4, #12]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	e7e9      	b.n	8001ac2 <__ssputs_r+0x8a>
	...

08001af0 <_svfiprintf_r>:
 8001af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af4:	4698      	mov	r8, r3
 8001af6:	898b      	ldrh	r3, [r1, #12]
 8001af8:	061b      	lsls	r3, r3, #24
 8001afa:	b09d      	sub	sp, #116	@ 0x74
 8001afc:	4607      	mov	r7, r0
 8001afe:	460d      	mov	r5, r1
 8001b00:	4614      	mov	r4, r2
 8001b02:	d510      	bpl.n	8001b26 <_svfiprintf_r+0x36>
 8001b04:	690b      	ldr	r3, [r1, #16]
 8001b06:	b973      	cbnz	r3, 8001b26 <_svfiprintf_r+0x36>
 8001b08:	2140      	movs	r1, #64	@ 0x40
 8001b0a:	f7ff ff09 	bl	8001920 <_malloc_r>
 8001b0e:	6028      	str	r0, [r5, #0]
 8001b10:	6128      	str	r0, [r5, #16]
 8001b12:	b930      	cbnz	r0, 8001b22 <_svfiprintf_r+0x32>
 8001b14:	230c      	movs	r3, #12
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	b01d      	add	sp, #116	@ 0x74
 8001b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b22:	2340      	movs	r3, #64	@ 0x40
 8001b24:	616b      	str	r3, [r5, #20]
 8001b26:	2300      	movs	r3, #0
 8001b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b34:	2330      	movs	r3, #48	@ 0x30
 8001b36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001cd4 <_svfiprintf_r+0x1e4>
 8001b3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b3e:	f04f 0901 	mov.w	r9, #1
 8001b42:	4623      	mov	r3, r4
 8001b44:	469a      	mov	sl, r3
 8001b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b4a:	b10a      	cbz	r2, 8001b50 <_svfiprintf_r+0x60>
 8001b4c:	2a25      	cmp	r2, #37	@ 0x25
 8001b4e:	d1f9      	bne.n	8001b44 <_svfiprintf_r+0x54>
 8001b50:	ebba 0b04 	subs.w	fp, sl, r4
 8001b54:	d00b      	beq.n	8001b6e <_svfiprintf_r+0x7e>
 8001b56:	465b      	mov	r3, fp
 8001b58:	4622      	mov	r2, r4
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	4638      	mov	r0, r7
 8001b5e:	f7ff ff6b 	bl	8001a38 <__ssputs_r>
 8001b62:	3001      	adds	r0, #1
 8001b64:	f000 80a7 	beq.w	8001cb6 <_svfiprintf_r+0x1c6>
 8001b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b6a:	445a      	add	r2, fp
 8001b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 809f 	beq.w	8001cb6 <_svfiprintf_r+0x1c6>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b82:	f10a 0a01 	add.w	sl, sl, #1
 8001b86:	9304      	str	r3, [sp, #16]
 8001b88:	9307      	str	r3, [sp, #28]
 8001b8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b90:	4654      	mov	r4, sl
 8001b92:	2205      	movs	r2, #5
 8001b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b98:	484e      	ldr	r0, [pc, #312]	@ (8001cd4 <_svfiprintf_r+0x1e4>)
 8001b9a:	f7fe fb21 	bl	80001e0 <memchr>
 8001b9e:	9a04      	ldr	r2, [sp, #16]
 8001ba0:	b9d8      	cbnz	r0, 8001bda <_svfiprintf_r+0xea>
 8001ba2:	06d0      	lsls	r0, r2, #27
 8001ba4:	bf44      	itt	mi
 8001ba6:	2320      	movmi	r3, #32
 8001ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001bac:	0711      	lsls	r1, r2, #28
 8001bae:	bf44      	itt	mi
 8001bb0:	232b      	movmi	r3, #43	@ 0x2b
 8001bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8001bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bbc:	d015      	beq.n	8001bea <_svfiprintf_r+0xfa>
 8001bbe:	9a07      	ldr	r2, [sp, #28]
 8001bc0:	4654      	mov	r4, sl
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f04f 0c0a 	mov.w	ip, #10
 8001bc8:	4621      	mov	r1, r4
 8001bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001bce:	3b30      	subs	r3, #48	@ 0x30
 8001bd0:	2b09      	cmp	r3, #9
 8001bd2:	d94b      	bls.n	8001c6c <_svfiprintf_r+0x17c>
 8001bd4:	b1b0      	cbz	r0, 8001c04 <_svfiprintf_r+0x114>
 8001bd6:	9207      	str	r2, [sp, #28]
 8001bd8:	e014      	b.n	8001c04 <_svfiprintf_r+0x114>
 8001bda:	eba0 0308 	sub.w	r3, r0, r8
 8001bde:	fa09 f303 	lsl.w	r3, r9, r3
 8001be2:	4313      	orrs	r3, r2
 8001be4:	9304      	str	r3, [sp, #16]
 8001be6:	46a2      	mov	sl, r4
 8001be8:	e7d2      	b.n	8001b90 <_svfiprintf_r+0xa0>
 8001bea:	9b03      	ldr	r3, [sp, #12]
 8001bec:	1d19      	adds	r1, r3, #4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	9103      	str	r1, [sp, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bfbb      	ittet	lt
 8001bf6:	425b      	neglt	r3, r3
 8001bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8001bfc:	9307      	strge	r3, [sp, #28]
 8001bfe:	9307      	strlt	r3, [sp, #28]
 8001c00:	bfb8      	it	lt
 8001c02:	9204      	strlt	r2, [sp, #16]
 8001c04:	7823      	ldrb	r3, [r4, #0]
 8001c06:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c08:	d10a      	bne.n	8001c20 <_svfiprintf_r+0x130>
 8001c0a:	7863      	ldrb	r3, [r4, #1]
 8001c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c0e:	d132      	bne.n	8001c76 <_svfiprintf_r+0x186>
 8001c10:	9b03      	ldr	r3, [sp, #12]
 8001c12:	1d1a      	adds	r2, r3, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	9203      	str	r2, [sp, #12]
 8001c18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001c1c:	3402      	adds	r4, #2
 8001c1e:	9305      	str	r3, [sp, #20]
 8001c20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001ce4 <_svfiprintf_r+0x1f4>
 8001c24:	7821      	ldrb	r1, [r4, #0]
 8001c26:	2203      	movs	r2, #3
 8001c28:	4650      	mov	r0, sl
 8001c2a:	f7fe fad9 	bl	80001e0 <memchr>
 8001c2e:	b138      	cbz	r0, 8001c40 <_svfiprintf_r+0x150>
 8001c30:	9b04      	ldr	r3, [sp, #16]
 8001c32:	eba0 000a 	sub.w	r0, r0, sl
 8001c36:	2240      	movs	r2, #64	@ 0x40
 8001c38:	4082      	lsls	r2, r0
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	3401      	adds	r4, #1
 8001c3e:	9304      	str	r3, [sp, #16]
 8001c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c44:	4824      	ldr	r0, [pc, #144]	@ (8001cd8 <_svfiprintf_r+0x1e8>)
 8001c46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001c4a:	2206      	movs	r2, #6
 8001c4c:	f7fe fac8 	bl	80001e0 <memchr>
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d036      	beq.n	8001cc2 <_svfiprintf_r+0x1d2>
 8001c54:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <_svfiprintf_r+0x1ec>)
 8001c56:	bb1b      	cbnz	r3, 8001ca0 <_svfiprintf_r+0x1b0>
 8001c58:	9b03      	ldr	r3, [sp, #12]
 8001c5a:	3307      	adds	r3, #7
 8001c5c:	f023 0307 	bic.w	r3, r3, #7
 8001c60:	3308      	adds	r3, #8
 8001c62:	9303      	str	r3, [sp, #12]
 8001c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c66:	4433      	add	r3, r6
 8001c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c6a:	e76a      	b.n	8001b42 <_svfiprintf_r+0x52>
 8001c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c70:	460c      	mov	r4, r1
 8001c72:	2001      	movs	r0, #1
 8001c74:	e7a8      	b.n	8001bc8 <_svfiprintf_r+0xd8>
 8001c76:	2300      	movs	r3, #0
 8001c78:	3401      	adds	r4, #1
 8001c7a:	9305      	str	r3, [sp, #20]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f04f 0c0a 	mov.w	ip, #10
 8001c82:	4620      	mov	r0, r4
 8001c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c88:	3a30      	subs	r2, #48	@ 0x30
 8001c8a:	2a09      	cmp	r2, #9
 8001c8c:	d903      	bls.n	8001c96 <_svfiprintf_r+0x1a6>
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0c6      	beq.n	8001c20 <_svfiprintf_r+0x130>
 8001c92:	9105      	str	r1, [sp, #20]
 8001c94:	e7c4      	b.n	8001c20 <_svfiprintf_r+0x130>
 8001c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e7f0      	b.n	8001c82 <_svfiprintf_r+0x192>
 8001ca0:	ab03      	add	r3, sp, #12
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	462a      	mov	r2, r5
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <_svfiprintf_r+0x1f0>)
 8001ca8:	a904      	add	r1, sp, #16
 8001caa:	4638      	mov	r0, r7
 8001cac:	f3af 8000 	nop.w
 8001cb0:	1c42      	adds	r2, r0, #1
 8001cb2:	4606      	mov	r6, r0
 8001cb4:	d1d6      	bne.n	8001c64 <_svfiprintf_r+0x174>
 8001cb6:	89ab      	ldrh	r3, [r5, #12]
 8001cb8:	065b      	lsls	r3, r3, #25
 8001cba:	f53f af2d 	bmi.w	8001b18 <_svfiprintf_r+0x28>
 8001cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001cc0:	e72c      	b.n	8001b1c <_svfiprintf_r+0x2c>
 8001cc2:	ab03      	add	r3, sp, #12
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <_svfiprintf_r+0x1f0>)
 8001cca:	a904      	add	r1, sp, #16
 8001ccc:	4638      	mov	r0, r7
 8001cce:	f000 f879 	bl	8001dc4 <_printf_i>
 8001cd2:	e7ed      	b.n	8001cb0 <_svfiprintf_r+0x1c0>
 8001cd4:	08002340 	.word	0x08002340
 8001cd8:	0800234a 	.word	0x0800234a
 8001cdc:	00000000 	.word	0x00000000
 8001ce0:	08001a39 	.word	0x08001a39
 8001ce4:	08002346 	.word	0x08002346

08001ce8 <_printf_common>:
 8001ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cec:	4616      	mov	r6, r2
 8001cee:	4698      	mov	r8, r3
 8001cf0:	688a      	ldr	r2, [r1, #8]
 8001cf2:	690b      	ldr	r3, [r1, #16]
 8001cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	bfb8      	it	lt
 8001cfc:	4613      	movlt	r3, r2
 8001cfe:	6033      	str	r3, [r6, #0]
 8001d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001d04:	4607      	mov	r7, r0
 8001d06:	460c      	mov	r4, r1
 8001d08:	b10a      	cbz	r2, 8001d0e <_printf_common+0x26>
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	6033      	str	r3, [r6, #0]
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	0699      	lsls	r1, r3, #26
 8001d12:	bf42      	ittt	mi
 8001d14:	6833      	ldrmi	r3, [r6, #0]
 8001d16:	3302      	addmi	r3, #2
 8001d18:	6033      	strmi	r3, [r6, #0]
 8001d1a:	6825      	ldr	r5, [r4, #0]
 8001d1c:	f015 0506 	ands.w	r5, r5, #6
 8001d20:	d106      	bne.n	8001d30 <_printf_common+0x48>
 8001d22:	f104 0a19 	add.w	sl, r4, #25
 8001d26:	68e3      	ldr	r3, [r4, #12]
 8001d28:	6832      	ldr	r2, [r6, #0]
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	42ab      	cmp	r3, r5
 8001d2e:	dc26      	bgt.n	8001d7e <_printf_common+0x96>
 8001d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d34:	6822      	ldr	r2, [r4, #0]
 8001d36:	3b00      	subs	r3, #0
 8001d38:	bf18      	it	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	0692      	lsls	r2, r2, #26
 8001d3e:	d42b      	bmi.n	8001d98 <_printf_common+0xb0>
 8001d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d44:	4641      	mov	r1, r8
 8001d46:	4638      	mov	r0, r7
 8001d48:	47c8      	blx	r9
 8001d4a:	3001      	adds	r0, #1
 8001d4c:	d01e      	beq.n	8001d8c <_printf_common+0xa4>
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	6922      	ldr	r2, [r4, #16]
 8001d52:	f003 0306 	and.w	r3, r3, #6
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf02      	ittt	eq
 8001d5a:	68e5      	ldreq	r5, [r4, #12]
 8001d5c:	6833      	ldreq	r3, [r6, #0]
 8001d5e:	1aed      	subeq	r5, r5, r3
 8001d60:	68a3      	ldr	r3, [r4, #8]
 8001d62:	bf0c      	ite	eq
 8001d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d68:	2500      	movne	r5, #0
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	bfc4      	itt	gt
 8001d6e:	1a9b      	subgt	r3, r3, r2
 8001d70:	18ed      	addgt	r5, r5, r3
 8001d72:	2600      	movs	r6, #0
 8001d74:	341a      	adds	r4, #26
 8001d76:	42b5      	cmp	r5, r6
 8001d78:	d11a      	bne.n	8001db0 <_printf_common+0xc8>
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	e008      	b.n	8001d90 <_printf_common+0xa8>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	4652      	mov	r2, sl
 8001d82:	4641      	mov	r1, r8
 8001d84:	4638      	mov	r0, r7
 8001d86:	47c8      	blx	r9
 8001d88:	3001      	adds	r0, #1
 8001d8a:	d103      	bne.n	8001d94 <_printf_common+0xac>
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d94:	3501      	adds	r5, #1
 8001d96:	e7c6      	b.n	8001d26 <_printf_common+0x3e>
 8001d98:	18e1      	adds	r1, r4, r3
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	2030      	movs	r0, #48	@ 0x30
 8001d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001da2:	4422      	add	r2, r4
 8001da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001dac:	3302      	adds	r3, #2
 8001dae:	e7c7      	b.n	8001d40 <_printf_common+0x58>
 8001db0:	2301      	movs	r3, #1
 8001db2:	4622      	mov	r2, r4
 8001db4:	4641      	mov	r1, r8
 8001db6:	4638      	mov	r0, r7
 8001db8:	47c8      	blx	r9
 8001dba:	3001      	adds	r0, #1
 8001dbc:	d0e6      	beq.n	8001d8c <_printf_common+0xa4>
 8001dbe:	3601      	adds	r6, #1
 8001dc0:	e7d9      	b.n	8001d76 <_printf_common+0x8e>
	...

08001dc4 <_printf_i>:
 8001dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001dc8:	7e0f      	ldrb	r7, [r1, #24]
 8001dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001dcc:	2f78      	cmp	r7, #120	@ 0x78
 8001dce:	4691      	mov	r9, r2
 8001dd0:	4680      	mov	r8, r0
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	469a      	mov	sl, r3
 8001dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001dda:	d807      	bhi.n	8001dec <_printf_i+0x28>
 8001ddc:	2f62      	cmp	r7, #98	@ 0x62
 8001dde:	d80a      	bhi.n	8001df6 <_printf_i+0x32>
 8001de0:	2f00      	cmp	r7, #0
 8001de2:	f000 80d2 	beq.w	8001f8a <_printf_i+0x1c6>
 8001de6:	2f58      	cmp	r7, #88	@ 0x58
 8001de8:	f000 80b9 	beq.w	8001f5e <_printf_i+0x19a>
 8001dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001df4:	e03a      	b.n	8001e6c <_printf_i+0xa8>
 8001df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001dfa:	2b15      	cmp	r3, #21
 8001dfc:	d8f6      	bhi.n	8001dec <_printf_i+0x28>
 8001dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8001e04 <_printf_i+0x40>)
 8001e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e04:	08001e5d 	.word	0x08001e5d
 8001e08:	08001e71 	.word	0x08001e71
 8001e0c:	08001ded 	.word	0x08001ded
 8001e10:	08001ded 	.word	0x08001ded
 8001e14:	08001ded 	.word	0x08001ded
 8001e18:	08001ded 	.word	0x08001ded
 8001e1c:	08001e71 	.word	0x08001e71
 8001e20:	08001ded 	.word	0x08001ded
 8001e24:	08001ded 	.word	0x08001ded
 8001e28:	08001ded 	.word	0x08001ded
 8001e2c:	08001ded 	.word	0x08001ded
 8001e30:	08001f71 	.word	0x08001f71
 8001e34:	08001e9b 	.word	0x08001e9b
 8001e38:	08001f2b 	.word	0x08001f2b
 8001e3c:	08001ded 	.word	0x08001ded
 8001e40:	08001ded 	.word	0x08001ded
 8001e44:	08001f93 	.word	0x08001f93
 8001e48:	08001ded 	.word	0x08001ded
 8001e4c:	08001e9b 	.word	0x08001e9b
 8001e50:	08001ded 	.word	0x08001ded
 8001e54:	08001ded 	.word	0x08001ded
 8001e58:	08001f33 	.word	0x08001f33
 8001e5c:	6833      	ldr	r3, [r6, #0]
 8001e5e:	1d1a      	adds	r2, r3, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6032      	str	r2, [r6, #0]
 8001e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e09d      	b.n	8001fac <_printf_i+0x1e8>
 8001e70:	6833      	ldr	r3, [r6, #0]
 8001e72:	6820      	ldr	r0, [r4, #0]
 8001e74:	1d19      	adds	r1, r3, #4
 8001e76:	6031      	str	r1, [r6, #0]
 8001e78:	0606      	lsls	r6, r0, #24
 8001e7a:	d501      	bpl.n	8001e80 <_printf_i+0xbc>
 8001e7c:	681d      	ldr	r5, [r3, #0]
 8001e7e:	e003      	b.n	8001e88 <_printf_i+0xc4>
 8001e80:	0645      	lsls	r5, r0, #25
 8001e82:	d5fb      	bpl.n	8001e7c <_printf_i+0xb8>
 8001e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e88:	2d00      	cmp	r5, #0
 8001e8a:	da03      	bge.n	8001e94 <_printf_i+0xd0>
 8001e8c:	232d      	movs	r3, #45	@ 0x2d
 8001e8e:	426d      	negs	r5, r5
 8001e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e94:	4859      	ldr	r0, [pc, #356]	@ (8001ffc <_printf_i+0x238>)
 8001e96:	230a      	movs	r3, #10
 8001e98:	e011      	b.n	8001ebe <_printf_i+0xfa>
 8001e9a:	6821      	ldr	r1, [r4, #0]
 8001e9c:	6833      	ldr	r3, [r6, #0]
 8001e9e:	0608      	lsls	r0, r1, #24
 8001ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ea4:	d402      	bmi.n	8001eac <_printf_i+0xe8>
 8001ea6:	0649      	lsls	r1, r1, #25
 8001ea8:	bf48      	it	mi
 8001eaa:	b2ad      	uxthmi	r5, r5
 8001eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8001eae:	4853      	ldr	r0, [pc, #332]	@ (8001ffc <_printf_i+0x238>)
 8001eb0:	6033      	str	r3, [r6, #0]
 8001eb2:	bf14      	ite	ne
 8001eb4:	230a      	movne	r3, #10
 8001eb6:	2308      	moveq	r3, #8
 8001eb8:	2100      	movs	r1, #0
 8001eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001ebe:	6866      	ldr	r6, [r4, #4]
 8001ec0:	60a6      	str	r6, [r4, #8]
 8001ec2:	2e00      	cmp	r6, #0
 8001ec4:	bfa2      	ittt	ge
 8001ec6:	6821      	ldrge	r1, [r4, #0]
 8001ec8:	f021 0104 	bicge.w	r1, r1, #4
 8001ecc:	6021      	strge	r1, [r4, #0]
 8001ece:	b90d      	cbnz	r5, 8001ed4 <_printf_i+0x110>
 8001ed0:	2e00      	cmp	r6, #0
 8001ed2:	d04b      	beq.n	8001f6c <_printf_i+0x1a8>
 8001ed4:	4616      	mov	r6, r2
 8001ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8001eda:	fb03 5711 	mls	r7, r3, r1, r5
 8001ede:	5dc7      	ldrb	r7, [r0, r7]
 8001ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ee4:	462f      	mov	r7, r5
 8001ee6:	42bb      	cmp	r3, r7
 8001ee8:	460d      	mov	r5, r1
 8001eea:	d9f4      	bls.n	8001ed6 <_printf_i+0x112>
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d10b      	bne.n	8001f08 <_printf_i+0x144>
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	07df      	lsls	r7, r3, #31
 8001ef4:	d508      	bpl.n	8001f08 <_printf_i+0x144>
 8001ef6:	6923      	ldr	r3, [r4, #16]
 8001ef8:	6861      	ldr	r1, [r4, #4]
 8001efa:	4299      	cmp	r1, r3
 8001efc:	bfde      	ittt	le
 8001efe:	2330      	movle	r3, #48	@ 0x30
 8001f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f08:	1b92      	subs	r2, r2, r6
 8001f0a:	6122      	str	r2, [r4, #16]
 8001f0c:	f8cd a000 	str.w	sl, [sp]
 8001f10:	464b      	mov	r3, r9
 8001f12:	aa03      	add	r2, sp, #12
 8001f14:	4621      	mov	r1, r4
 8001f16:	4640      	mov	r0, r8
 8001f18:	f7ff fee6 	bl	8001ce8 <_printf_common>
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	d14a      	bne.n	8001fb6 <_printf_i+0x1f2>
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	b004      	add	sp, #16
 8001f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	f043 0320 	orr.w	r3, r3, #32
 8001f30:	6023      	str	r3, [r4, #0]
 8001f32:	4833      	ldr	r0, [pc, #204]	@ (8002000 <_printf_i+0x23c>)
 8001f34:	2778      	movs	r7, #120	@ 0x78
 8001f36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	6831      	ldr	r1, [r6, #0]
 8001f3e:	061f      	lsls	r7, r3, #24
 8001f40:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f44:	d402      	bmi.n	8001f4c <_printf_i+0x188>
 8001f46:	065f      	lsls	r7, r3, #25
 8001f48:	bf48      	it	mi
 8001f4a:	b2ad      	uxthmi	r5, r5
 8001f4c:	6031      	str	r1, [r6, #0]
 8001f4e:	07d9      	lsls	r1, r3, #31
 8001f50:	bf44      	itt	mi
 8001f52:	f043 0320 	orrmi.w	r3, r3, #32
 8001f56:	6023      	strmi	r3, [r4, #0]
 8001f58:	b11d      	cbz	r5, 8001f62 <_printf_i+0x19e>
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	e7ac      	b.n	8001eb8 <_printf_i+0xf4>
 8001f5e:	4827      	ldr	r0, [pc, #156]	@ (8001ffc <_printf_i+0x238>)
 8001f60:	e7e9      	b.n	8001f36 <_printf_i+0x172>
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	f023 0320 	bic.w	r3, r3, #32
 8001f68:	6023      	str	r3, [r4, #0]
 8001f6a:	e7f6      	b.n	8001f5a <_printf_i+0x196>
 8001f6c:	4616      	mov	r6, r2
 8001f6e:	e7bd      	b.n	8001eec <_printf_i+0x128>
 8001f70:	6833      	ldr	r3, [r6, #0]
 8001f72:	6825      	ldr	r5, [r4, #0]
 8001f74:	6961      	ldr	r1, [r4, #20]
 8001f76:	1d18      	adds	r0, r3, #4
 8001f78:	6030      	str	r0, [r6, #0]
 8001f7a:	062e      	lsls	r6, r5, #24
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	d501      	bpl.n	8001f84 <_printf_i+0x1c0>
 8001f80:	6019      	str	r1, [r3, #0]
 8001f82:	e002      	b.n	8001f8a <_printf_i+0x1c6>
 8001f84:	0668      	lsls	r0, r5, #25
 8001f86:	d5fb      	bpl.n	8001f80 <_printf_i+0x1bc>
 8001f88:	8019      	strh	r1, [r3, #0]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6123      	str	r3, [r4, #16]
 8001f8e:	4616      	mov	r6, r2
 8001f90:	e7bc      	b.n	8001f0c <_printf_i+0x148>
 8001f92:	6833      	ldr	r3, [r6, #0]
 8001f94:	1d1a      	adds	r2, r3, #4
 8001f96:	6032      	str	r2, [r6, #0]
 8001f98:	681e      	ldr	r6, [r3, #0]
 8001f9a:	6862      	ldr	r2, [r4, #4]
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4630      	mov	r0, r6
 8001fa0:	f7fe f91e 	bl	80001e0 <memchr>
 8001fa4:	b108      	cbz	r0, 8001faa <_printf_i+0x1e6>
 8001fa6:	1b80      	subs	r0, r0, r6
 8001fa8:	6060      	str	r0, [r4, #4]
 8001faa:	6863      	ldr	r3, [r4, #4]
 8001fac:	6123      	str	r3, [r4, #16]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001fb4:	e7aa      	b.n	8001f0c <_printf_i+0x148>
 8001fb6:	6923      	ldr	r3, [r4, #16]
 8001fb8:	4632      	mov	r2, r6
 8001fba:	4649      	mov	r1, r9
 8001fbc:	4640      	mov	r0, r8
 8001fbe:	47d0      	blx	sl
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d0ad      	beq.n	8001f20 <_printf_i+0x15c>
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	079b      	lsls	r3, r3, #30
 8001fc8:	d413      	bmi.n	8001ff2 <_printf_i+0x22e>
 8001fca:	68e0      	ldr	r0, [r4, #12]
 8001fcc:	9b03      	ldr	r3, [sp, #12]
 8001fce:	4298      	cmp	r0, r3
 8001fd0:	bfb8      	it	lt
 8001fd2:	4618      	movlt	r0, r3
 8001fd4:	e7a6      	b.n	8001f24 <_printf_i+0x160>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	4632      	mov	r2, r6
 8001fda:	4649      	mov	r1, r9
 8001fdc:	4640      	mov	r0, r8
 8001fde:	47d0      	blx	sl
 8001fe0:	3001      	adds	r0, #1
 8001fe2:	d09d      	beq.n	8001f20 <_printf_i+0x15c>
 8001fe4:	3501      	adds	r5, #1
 8001fe6:	68e3      	ldr	r3, [r4, #12]
 8001fe8:	9903      	ldr	r1, [sp, #12]
 8001fea:	1a5b      	subs	r3, r3, r1
 8001fec:	42ab      	cmp	r3, r5
 8001fee:	dcf2      	bgt.n	8001fd6 <_printf_i+0x212>
 8001ff0:	e7eb      	b.n	8001fca <_printf_i+0x206>
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	f104 0619 	add.w	r6, r4, #25
 8001ff8:	e7f5      	b.n	8001fe6 <_printf_i+0x222>
 8001ffa:	bf00      	nop
 8001ffc:	08002351 	.word	0x08002351
 8002000:	08002362 	.word	0x08002362

08002004 <memmove>:
 8002004:	4288      	cmp	r0, r1
 8002006:	b510      	push	{r4, lr}
 8002008:	eb01 0402 	add.w	r4, r1, r2
 800200c:	d902      	bls.n	8002014 <memmove+0x10>
 800200e:	4284      	cmp	r4, r0
 8002010:	4623      	mov	r3, r4
 8002012:	d807      	bhi.n	8002024 <memmove+0x20>
 8002014:	1e43      	subs	r3, r0, #1
 8002016:	42a1      	cmp	r1, r4
 8002018:	d008      	beq.n	800202c <memmove+0x28>
 800201a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800201e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002022:	e7f8      	b.n	8002016 <memmove+0x12>
 8002024:	4402      	add	r2, r0
 8002026:	4601      	mov	r1, r0
 8002028:	428a      	cmp	r2, r1
 800202a:	d100      	bne.n	800202e <memmove+0x2a>
 800202c:	bd10      	pop	{r4, pc}
 800202e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002036:	e7f7      	b.n	8002028 <memmove+0x24>

08002038 <_sbrk_r>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	4d06      	ldr	r5, [pc, #24]	@ (8002054 <_sbrk_r+0x1c>)
 800203c:	2300      	movs	r3, #0
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	f7fe ff76 	bl	8000f34 <_sbrk>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_sbrk_r+0x1a>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	b103      	cbz	r3, 8002052 <_sbrk_r+0x1a>
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	200004b8 	.word	0x200004b8

08002058 <memcpy>:
 8002058:	440a      	add	r2, r1
 800205a:	4291      	cmp	r1, r2
 800205c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002060:	d100      	bne.n	8002064 <memcpy+0xc>
 8002062:	4770      	bx	lr
 8002064:	b510      	push	{r4, lr}
 8002066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800206a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800206e:	4291      	cmp	r1, r2
 8002070:	d1f9      	bne.n	8002066 <memcpy+0xe>
 8002072:	bd10      	pop	{r4, pc}

08002074 <_realloc_r>:
 8002074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002078:	4680      	mov	r8, r0
 800207a:	4615      	mov	r5, r2
 800207c:	460c      	mov	r4, r1
 800207e:	b921      	cbnz	r1, 800208a <_realloc_r+0x16>
 8002080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002084:	4611      	mov	r1, r2
 8002086:	f7ff bc4b 	b.w	8001920 <_malloc_r>
 800208a:	b92a      	cbnz	r2, 8002098 <_realloc_r+0x24>
 800208c:	f7ff fbdc 	bl	8001848 <_free_r>
 8002090:	2400      	movs	r4, #0
 8002092:	4620      	mov	r0, r4
 8002094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002098:	f000 f81a 	bl	80020d0 <_malloc_usable_size_r>
 800209c:	4285      	cmp	r5, r0
 800209e:	4606      	mov	r6, r0
 80020a0:	d802      	bhi.n	80020a8 <_realloc_r+0x34>
 80020a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80020a6:	d8f4      	bhi.n	8002092 <_realloc_r+0x1e>
 80020a8:	4629      	mov	r1, r5
 80020aa:	4640      	mov	r0, r8
 80020ac:	f7ff fc38 	bl	8001920 <_malloc_r>
 80020b0:	4607      	mov	r7, r0
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d0ec      	beq.n	8002090 <_realloc_r+0x1c>
 80020b6:	42b5      	cmp	r5, r6
 80020b8:	462a      	mov	r2, r5
 80020ba:	4621      	mov	r1, r4
 80020bc:	bf28      	it	cs
 80020be:	4632      	movcs	r2, r6
 80020c0:	f7ff ffca 	bl	8002058 <memcpy>
 80020c4:	4621      	mov	r1, r4
 80020c6:	4640      	mov	r0, r8
 80020c8:	f7ff fbbe 	bl	8001848 <_free_r>
 80020cc:	463c      	mov	r4, r7
 80020ce:	e7e0      	b.n	8002092 <_realloc_r+0x1e>

080020d0 <_malloc_usable_size_r>:
 80020d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020d4:	1f18      	subs	r0, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bfbc      	itt	lt
 80020da:	580b      	ldrlt	r3, [r1, r0]
 80020dc:	18c0      	addlt	r0, r0, r3
 80020de:	4770      	bx	lr

080020e0 <_init>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	bf00      	nop
 80020e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e6:	bc08      	pop	{r3}
 80020e8:	469e      	mov	lr, r3
 80020ea:	4770      	bx	lr

080020ec <_fini>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr
